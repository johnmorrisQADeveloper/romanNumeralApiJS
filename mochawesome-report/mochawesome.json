{
  "stats": {
    "suites": 10,
    "tests": 62,
    "passes": 52,
    "pending": 0,
    "failures": 10,
    "start": "2017-07-30T12:46:35.246Z",
    "end": "2017-07-30T12:46:53.271Z",
    "duration": 18025,
    "testsRegistered": 62,
    "passPercent": 83.9,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Alternative Path, Check with 0",
        "suites": [],
        "tests": [
          {
            "title": "0",
            "fullTitle": "Alternative Path, Check with 0 0",
            "timedOut": false,
            "duration": 260,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "d9ddc731-5115-49de-be53-38341719b5c6",
            "parentUUID": "497df46d-c85a-4fff-939e-bed391f04c7a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "0 =  ",
            "fullTitle": "Alternative Path, Check with 0 0 =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError:  != undefined",
              "estack": "AssertionError:  != undefined\n    at Context.<anonymous> (test/AlternativePathTest.js:37:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "f8c080e7-6403-408c-9a54-81d98172d86d",
            "parentUUID": "497df46d-c85a-4fff-939e-bed391f04c7a",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "497df46d-c85a-4fff-939e-bed391f04c7a",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "0",
            "fullTitle": "Alternative Path, Check with 0 0",
            "timedOut": false,
            "duration": 260,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "d9ddc731-5115-49de-be53-38341719b5c6",
            "parentUUID": "497df46d-c85a-4fff-939e-bed391f04c7a",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "0 =  ",
            "fullTitle": "Alternative Path, Check with 0 0 =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError:  != undefined",
              "estack": "AssertionError:  != undefined\n    at Context.<anonymous> (test/AlternativePathTest.js:37:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "f8c080e7-6403-408c-9a54-81d98172d86d",
            "parentUUID": "497df46d-c85a-4fff-939e-bed391f04c7a",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 261,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, Check with 9800",
        "suites": [],
        "tests": [
          {
            "title": "9800",
            "fullTitle": "Alternative Path, Check with 9800 9800",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "0d84261c-2d4e-4abb-925c-9abc3045ef88",
            "parentUUID": "13784555-effd-4023-a75c-7f3237d87f19",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "9800 =  MMMMMMMMMDCCC",
            "fullTitle": "Alternative Path, Check with 9800 9800 =  MMMMMMMMMDCCC",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: MMMMMMMMMDCCC != ",
              "estack": "AssertionError: MMMMMMMMMDCCC != \n    at Context.<anonymous> (test/AlternativePathTest.js:69:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "13f5f827-8b8d-4a96-9d9b-bffea81340c5",
            "parentUUID": "13784555-effd-4023-a75c-7f3237d87f19",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "13784555-effd-4023-a75c-7f3237d87f19",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "9800",
            "fullTitle": "Alternative Path, Check with 9800 9800",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "0d84261c-2d4e-4abb-925c-9abc3045ef88",
            "parentUUID": "13784555-effd-4023-a75c-7f3237d87f19",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "9800 =  MMMMMMMMMDCCC",
            "fullTitle": "Alternative Path, Check with 9800 9800 =  MMMMMMMMMDCCC",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: MMMMMMMMMDCCC != ",
              "estack": "AssertionError: MMMMMMMMMDCCC != \n    at Context.<anonymous> (test/AlternativePathTest.js:69:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "13f5f827-8b8d-4a96-9d9b-bffea81340c5",
            "parentUUID": "13784555-effd-4023-a75c-7f3237d87f19",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 251,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, Check with -3",
        "suites": [],
        "tests": [
          {
            "title": "-3",
            "fullTitle": "Alternative Path, Check with -3 -3",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "1df7ab8f-77d5-40d6-91a7-2974ef1fee78",
            "parentUUID": "9d3ae2ec-e66e-4836-9560-13afd8c7ef0f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "-3 =  ",
            "fullTitle": "Alternative Path, Check with -3 -3 =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:101:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "d656e8d5-dcb5-4045-9df5-f7c2c1937fbf",
            "parentUUID": "9d3ae2ec-e66e-4836-9560-13afd8c7ef0f",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "9d3ae2ec-e66e-4836-9560-13afd8c7ef0f",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "-3",
            "fullTitle": "Alternative Path, Check with -3 -3",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "1df7ab8f-77d5-40d6-91a7-2974ef1fee78",
            "parentUUID": "9d3ae2ec-e66e-4836-9560-13afd8c7ef0f",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "-3 =  ",
            "fullTitle": "Alternative Path, Check with -3 -3 =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:101:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "d656e8d5-dcb5-4045-9df5-f7c2c1937fbf",
            "parentUUID": "9d3ae2ec-e66e-4836-9560-13afd8c7ef0f",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 255,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, Check with no values",
        "suites": [],
        "tests": [
          {
            "title": "No value",
            "fullTitle": "Alternative Path, Check with no values No value",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman();\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "8dd82dcd-70d8-457f-9aed-c276f30c7d0e",
            "parentUUID": "0612aca9-99e0-4a66-b628-c36141d0a2a0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Enter a value",
            "fullTitle": "Alternative Path, Check with no values Enter a value",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:131:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "f242c8d1-e093-4e7a-801c-0b25d4b11db9",
            "parentUUID": "0612aca9-99e0-4a66-b628-c36141d0a2a0",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "0612aca9-99e0-4a66-b628-c36141d0a2a0",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "No value",
            "fullTitle": "Alternative Path, Check with no values No value",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman();\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "8dd82dcd-70d8-457f-9aed-c276f30c7d0e",
            "parentUUID": "0612aca9-99e0-4a66-b628-c36141d0a2a0",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "Enter a value",
            "fullTitle": "Alternative Path, Check with no values Enter a value",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:131:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "f242c8d1-e093-4e7a-801c-0b25d4b11db9",
            "parentUUID": "0612aca9-99e0-4a66-b628-c36141d0a2a0",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 254,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, with chars ",
        "suites": [],
        "tests": [
          {
            "title": "roman",
            "fullTitle": "Alternative Path, with chars  roman",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "4e3ef3d4-1c21-42ea-99bb-35877612cfc2",
            "parentUUID": "8c9e55f8-c9a6-4fcf-bd14-780f807871dc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "roman =  ",
            "fullTitle": "Alternative Path, with chars  roman =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:163:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "18b632fe-70fb-4285-a428-022cacce27ed",
            "parentUUID": "8c9e55f8-c9a6-4fcf-bd14-780f807871dc",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "8c9e55f8-c9a6-4fcf-bd14-780f807871dc",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "roman",
            "fullTitle": "Alternative Path, with chars  roman",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "4e3ef3d4-1c21-42ea-99bb-35877612cfc2",
            "parentUUID": "8c9e55f8-c9a6-4fcf-bd14-780f807871dc",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "roman =  ",
            "fullTitle": "Alternative Path, with chars  roman =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:163:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "18b632fe-70fb-4285-a428-022cacce27ed",
            "parentUUID": "8c9e55f8-c9a6-4fcf-bd14-780f807871dc",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 253,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, with decimal values  ",
        "suites": [],
        "tests": [
          {
            "title": "34.4",
            "fullTitle": "Alternative Path, with decimal values   34.4",
            "timedOut": false,
            "duration": 256,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "b214e33a-6da7-499b-93a7-7855df45ac08",
            "parentUUID": "75b9f804-3d8d-4a82-9b6f-1a19b36c4171",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "34.4 =  ",
            "fullTitle": "Alternative Path, with decimal values   34.4 =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError:  != XXXIV",
              "estack": "AssertionError:  != XXXIV\n    at Context.<anonymous> (test/AlternativePathTest.js:194:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "b43b8027-7dda-4647-a2ef-074930220fbf",
            "parentUUID": "75b9f804-3d8d-4a82-9b6f-1a19b36c4171",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "75b9f804-3d8d-4a82-9b6f-1a19b36c4171",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "34.4",
            "fullTitle": "Alternative Path, with decimal values   34.4",
            "timedOut": false,
            "duration": 256,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "b214e33a-6da7-499b-93a7-7855df45ac08",
            "parentUUID": "75b9f804-3d8d-4a82-9b6f-1a19b36c4171",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "34.4 =  ",
            "fullTitle": "Alternative Path, with decimal values   34.4 =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError:  != XXXIV",
              "estack": "AssertionError:  != XXXIV\n    at Context.<anonymous> (test/AlternativePathTest.js:194:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "b43b8027-7dda-4647-a2ef-074930220fbf",
            "parentUUID": "75b9f804-3d8d-4a82-9b6f-1a19b36c4171",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 257,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, with Roman Numerals  ",
        "suites": [],
        "tests": [
          {
            "title": "XII",
            "fullTitle": "Alternative Path, with Roman Numerals   XII",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "6866a08f-ecbf-460a-8003-b91de9de311e",
            "parentUUID": "25cef883-4872-454f-98e1-1f91c6c96421",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "XII =  ",
            "fullTitle": "Alternative Path, with Roman Numerals   XII =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:226:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "8bb0d8ec-0efa-4369-ba61-0ae59d64bf5c",
            "parentUUID": "25cef883-4872-454f-98e1-1f91c6c96421",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "25cef883-4872-454f-98e1-1f91c6c96421",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "XII",
            "fullTitle": "Alternative Path, with Roman Numerals   XII",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "6866a08f-ecbf-460a-8003-b91de9de311e",
            "parentUUID": "25cef883-4872-454f-98e1-1f91c6c96421",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "XII =  ",
            "fullTitle": "Alternative Path, with Roman Numerals   XII =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:226:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "8bb0d8ec-0efa-4369-ba61-0ae59d64bf5c",
            "parentUUID": "25cef883-4872-454f-98e1-1f91c6c96421",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 255,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, with special characters ', !, & ",
        "suites": [],
        "tests": [
          {
            "title": "'",
            "fullTitle": "Alternative Path, with special characters ', !, &  '",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a4c13823-2688-4b56-9d23-4767454b6eea",
            "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "' =  ",
            "fullTitle": "Alternative Path, with special characters ', !, &  ' =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:260:13)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "ece2ceb0-841a-4f4e-8cc2-3dce83250811",
            "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "!",
            "fullTitle": "Alternative Path, with special characters ', !, &  !",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "5ea51527-13c0-4196-9b84-fa6665939a44",
            "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "! =  ",
            "fullTitle": "Alternative Path, with special characters ', !, &  ! =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:260:13)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "b2e60ab6-34a8-4470-8336-bfc904eb1bbc",
            "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "&",
            "fullTitle": "Alternative Path, with special characters ', !, &  &",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "1b52bc97-f451-46e9-a044-c49e9d5819ab",
            "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "& =  ",
            "fullTitle": "Alternative Path, with special characters ', !, &  & =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:260:13)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "ecda6796-b832-4400-896d-f403f716d46e",
            "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "'",
            "fullTitle": "Alternative Path, with special characters ', !, &  '",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a4c13823-2688-4b56-9d23-4767454b6eea",
            "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "!",
            "fullTitle": "Alternative Path, with special characters ', !, &  !",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "5ea51527-13c0-4196-9b84-fa6665939a44",
            "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "&",
            "fullTitle": "Alternative Path, with special characters ', !, &  &",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "1b52bc97-f451-46e9-a044-c49e9d5819ab",
            "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "' =  ",
            "fullTitle": "Alternative Path, with special characters ', !, &  ' =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:260:13)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "ece2ceb0-841a-4f4e-8cc2-3dce83250811",
            "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "! =  ",
            "fullTitle": "Alternative Path, with special characters ', !, &  ! =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:260:13)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "b2e60ab6-34a8-4470-8336-bfc904eb1bbc",
            "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "& =  ",
            "fullTitle": "Alternative Path, with special characters ', !, &  & =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:260:13)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "ecda6796-b832-4400-896d-f403f716d46e",
            "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 3,
        "totalFailures": 3,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1356,
        "rootEmpty": false
      },
      {
        "title": "Main Path, Inner Boundary Values {1-3999}",
        "suites": [],
        "tests": [
          {
            "title": "1",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "3fb00e81-82bb-447d-8d43-0a375443a62c",
            "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "1 =  I",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1 =  I",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "4dbd5712-1e06-4331-b4e3-a949bccb4e45",
            "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "15",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "47001006-6099-449e-af44-96ab3f2b9cc8",
            "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "15 =  XV",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15 =  XV",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "49ca4681-d0b0-4dc7-885e-63930d9d0f07",
            "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "3999",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "77e13148-3a84-4a15-9607-2829bc421705",
            "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "3999 =  MMMCMXCIX",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999 =  MMMCMXCIX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "ca44a3d9-55de-4b0d-b87e-41550b452d72",
            "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/MainPathTest.js",
        "uuid": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/MainPathTest.js",
        "passes": [
          {
            "title": "1",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "3fb00e81-82bb-447d-8d43-0a375443a62c",
            "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "1 =  I",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1 =  I",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "4dbd5712-1e06-4331-b4e3-a949bccb4e45",
            "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "15",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "47001006-6099-449e-af44-96ab3f2b9cc8",
            "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "15 =  XV",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15 =  XV",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "49ca4681-d0b0-4dc7-885e-63930d9d0f07",
            "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "3999",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "77e13148-3a84-4a15-9607-2829bc421705",
            "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "3999 =  MMMCMXCIX",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999 =  MMMCMXCIX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "ca44a3d9-55de-4b0d-b87e-41550b452d72",
            "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2117,
        "rootEmpty": false
      },
      {
        "title": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1}",
        "suites": [],
        "tests": [
          {
            "title": "4",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "d8170591-f340-47be-b012-b267cc0e057e",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "4 =  IV",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4 =  IV",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "06b66f26-3fd9-47a8-b40c-2531303c0ab5",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "5",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "34c93f30-4bb7-4ec8-91a6-f77622bdf82d",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "5 =  V",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5 =  V",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "530fe799-31fe-46dd-86c6-d70d69460e45",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "9",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "c8f91e55-5b21-42b5-9d1a-14d2aace6898",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "9 =  IX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9 =  IX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "88cc5cb2-63ea-497f-b8bb-bef439305145",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "10",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "dd33472d-ca28-45b4-b91f-c145589794fb",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "10 =  X",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10 =  X",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "e7fffb3c-3aca-462e-962f-774646bce31f",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "11",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "f65fdea8-9c56-404e-8a7b-259ab6e2f079",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "11 =  XI",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11 =  XI",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "a2efc7ca-e694-4731-be62-e81f1366f192",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "39",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "8a3b6142-3fcf-457b-a584-927232834116",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "39 =  XXXIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39 =  XXXIX",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "eff4ec36-75cc-4a8f-95bc-366988f8fbe4",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "40",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "50ebd00b-5609-4e7b-842a-31d067320bec",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "40 =  XL",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40 =  XL",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "76123d0e-8e96-4588-8cdd-48922cb781c9",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "41",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "37012329-dd81-445c-b41d-38a0d6f3c615",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "41 =  XLI",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41 =  XLI",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "e2b43b08-cee0-4528-b168-c4745557a377",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "89",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "14478858-2587-4b35-ab57-c6220a641bdb",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "89 =  LXXXIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89 =  LXXXIX",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "811a5f81-b1b9-4e11-ad68-6d902a92fb17",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "90",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90",
            "timedOut": false,
            "duration": 450,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "7611502f-94f7-405b-81cd-dc23adc297ae",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "90 =  XC",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90 =  XC",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "b1748998-f81c-4fb3-b6e5-ac883f2760dc",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "91",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "6c328126-a4f9-4c10-ba7c-9f76e07e3da2",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "91 =  XCI",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91 =  XCI",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "678385a9-29e3-4dc9-92d3-02c858fde90b",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "389",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "732dceff-0824-4ade-8841-b3a0253dd06f",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "389 =  CCCLXXXIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389 =  CCCLXXXIX",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "e945214a-a7d1-4fd7-8a98-aa3c8d0d1032",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "400",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "49f01441-0790-4e6f-bc6c-b7038fdceecb",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "400 =  CD",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400 =  CD",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "38066c3e-2b29-4801-8f23-cb80b3290950",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "450",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "ddd7d494-f17f-4ca3-8c71-dd8c5fb9a071",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "450 =  CDL",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450 =  CDL",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "544bc039-b749-416e-8adb-b4ddc72384be",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "899",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a5d54036-3f4c-4d70-9600-e449a6842307",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "899 =  DCCCXCIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899 =  DCCCXCIX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "c9007de8-86da-4ce6-ac1d-cc6f74a5ee84",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "900",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900",
            "timedOut": false,
            "duration": 458,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "d65c8e74-d51a-42f3-8146-75745016e49d",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "900 =  CM",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900 =  CM",
            "timedOut": false,
            "duration": 249,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "00829ca9-29b1-4709-84db-24b76b502edd",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "999",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "7fc33c2e-4fc8-40ee-8dfe-cf81e28e346a",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "999 =  CMXCIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999 =  CMXCIX",
            "timedOut": false,
            "duration": 256,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "0b7b6abd-0557-4d02-9c87-f43be070b927",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "1200",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "de42758a-8a1b-4c3e-9c94-222179f232ad",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "1200 =  MCC",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200 =  MCC",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "8f9829bd-abe8-43fa-bdf3-6a6a54d11635",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/MainPathTest.js",
        "uuid": "d25b667f-96d6-4775-adb8-70edcac67f8b",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/MainPathTest.js",
        "passes": [
          {
            "title": "4",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "d8170591-f340-47be-b012-b267cc0e057e",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "4 =  IV",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4 =  IV",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "06b66f26-3fd9-47a8-b40c-2531303c0ab5",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "5",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "34c93f30-4bb7-4ec8-91a6-f77622bdf82d",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "5 =  V",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5 =  V",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "530fe799-31fe-46dd-86c6-d70d69460e45",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "9",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "c8f91e55-5b21-42b5-9d1a-14d2aace6898",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "9 =  IX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9 =  IX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "88cc5cb2-63ea-497f-b8bb-bef439305145",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "10",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "dd33472d-ca28-45b4-b91f-c145589794fb",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "10 =  X",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10 =  X",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "e7fffb3c-3aca-462e-962f-774646bce31f",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "11",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "f65fdea8-9c56-404e-8a7b-259ab6e2f079",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "11 =  XI",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11 =  XI",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "a2efc7ca-e694-4731-be62-e81f1366f192",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "39",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "8a3b6142-3fcf-457b-a584-927232834116",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "39 =  XXXIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39 =  XXXIX",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "eff4ec36-75cc-4a8f-95bc-366988f8fbe4",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "40",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "50ebd00b-5609-4e7b-842a-31d067320bec",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "40 =  XL",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40 =  XL",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "76123d0e-8e96-4588-8cdd-48922cb781c9",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "41",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "37012329-dd81-445c-b41d-38a0d6f3c615",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "41 =  XLI",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41 =  XLI",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "e2b43b08-cee0-4528-b168-c4745557a377",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "89",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "14478858-2587-4b35-ab57-c6220a641bdb",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "89 =  LXXXIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89 =  LXXXIX",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "811a5f81-b1b9-4e11-ad68-6d902a92fb17",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "90",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90",
            "timedOut": false,
            "duration": 450,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "7611502f-94f7-405b-81cd-dc23adc297ae",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "90 =  XC",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90 =  XC",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "b1748998-f81c-4fb3-b6e5-ac883f2760dc",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "91",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "6c328126-a4f9-4c10-ba7c-9f76e07e3da2",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "91 =  XCI",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91 =  XCI",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "678385a9-29e3-4dc9-92d3-02c858fde90b",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "389",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "732dceff-0824-4ade-8841-b3a0253dd06f",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "389 =  CCCLXXXIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389 =  CCCLXXXIX",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "e945214a-a7d1-4fd7-8a98-aa3c8d0d1032",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "400",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "49f01441-0790-4e6f-bc6c-b7038fdceecb",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "400 =  CD",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400 =  CD",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "38066c3e-2b29-4801-8f23-cb80b3290950",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "450",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "ddd7d494-f17f-4ca3-8c71-dd8c5fb9a071",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "450 =  CDL",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450 =  CDL",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "544bc039-b749-416e-8adb-b4ddc72384be",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "899",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a5d54036-3f4c-4d70-9600-e449a6842307",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "899 =  DCCCXCIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899 =  DCCCXCIX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "c9007de8-86da-4ce6-ac1d-cc6f74a5ee84",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "900",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900",
            "timedOut": false,
            "duration": 458,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "d65c8e74-d51a-42f3-8146-75745016e49d",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "900 =  CM",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900 =  CM",
            "timedOut": false,
            "duration": 249,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "00829ca9-29b1-4709-84db-24b76b502edd",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "999",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "7fc33c2e-4fc8-40ee-8dfe-cf81e28e346a",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "999 =  CMXCIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999 =  CMXCIX",
            "timedOut": false,
            "duration": 256,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "0b7b6abd-0557-4d02-9c87-f43be070b927",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "1200",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "de42758a-8a1b-4c3e-9c94-222179f232ad",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "1200 =  MCC",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200 =  MCC",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "8f9829bd-abe8-43fa-bdf3-6a6a54d11635",
            "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 36,
        "totalPasses": 36,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 12702,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "ac725038-c083-4e28-8352-42c33381b394",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "0",
      "fullTitle": "Alternative Path, Check with 0 0",
      "timedOut": false,
      "duration": 260,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "d9ddc731-5115-49de-be53-38341719b5c6",
      "parentUUID": "497df46d-c85a-4fff-939e-bed391f04c7a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "0 =  ",
      "fullTitle": "Alternative Path, Check with 0 0 =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError:  != undefined",
        "estack": "AssertionError:  != undefined\n    at Context.<anonymous> (test/AlternativePathTest.js:37:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "f8c080e7-6403-408c-9a54-81d98172d86d",
      "parentUUID": "497df46d-c85a-4fff-939e-bed391f04c7a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9800",
      "fullTitle": "Alternative Path, Check with 9800 9800",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "0d84261c-2d4e-4abb-925c-9abc3045ef88",
      "parentUUID": "13784555-effd-4023-a75c-7f3237d87f19",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9800 =  MMMMMMMMMDCCC",
      "fullTitle": "Alternative Path, Check with 9800 9800 =  MMMMMMMMMDCCC",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: MMMMMMMMMDCCC != ",
        "estack": "AssertionError: MMMMMMMMMDCCC != \n    at Context.<anonymous> (test/AlternativePathTest.js:69:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "13f5f827-8b8d-4a96-9d9b-bffea81340c5",
      "parentUUID": "13784555-effd-4023-a75c-7f3237d87f19",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "-3",
      "fullTitle": "Alternative Path, Check with -3 -3",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "1df7ab8f-77d5-40d6-91a7-2974ef1fee78",
      "parentUUID": "9d3ae2ec-e66e-4836-9560-13afd8c7ef0f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "-3 =  ",
      "fullTitle": "Alternative Path, Check with -3 -3 =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:101:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "d656e8d5-dcb5-4045-9df5-f7c2c1937fbf",
      "parentUUID": "9d3ae2ec-e66e-4836-9560-13afd8c7ef0f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "No value",
      "fullTitle": "Alternative Path, Check with no values No value",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman();\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "8dd82dcd-70d8-457f-9aed-c276f30c7d0e",
      "parentUUID": "0612aca9-99e0-4a66-b628-c36141d0a2a0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Enter a value",
      "fullTitle": "Alternative Path, Check with no values Enter a value",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:131:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "f242c8d1-e093-4e7a-801c-0b25d4b11db9",
      "parentUUID": "0612aca9-99e0-4a66-b628-c36141d0a2a0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "roman",
      "fullTitle": "Alternative Path, with chars  roman",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "4e3ef3d4-1c21-42ea-99bb-35877612cfc2",
      "parentUUID": "8c9e55f8-c9a6-4fcf-bd14-780f807871dc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "roman =  ",
      "fullTitle": "Alternative Path, with chars  roman =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:163:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "18b632fe-70fb-4285-a428-022cacce27ed",
      "parentUUID": "8c9e55f8-c9a6-4fcf-bd14-780f807871dc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "34.4",
      "fullTitle": "Alternative Path, with decimal values   34.4",
      "timedOut": false,
      "duration": 256,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "b214e33a-6da7-499b-93a7-7855df45ac08",
      "parentUUID": "75b9f804-3d8d-4a82-9b6f-1a19b36c4171",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "34.4 =  ",
      "fullTitle": "Alternative Path, with decimal values   34.4 =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError:  != XXXIV",
        "estack": "AssertionError:  != XXXIV\n    at Context.<anonymous> (test/AlternativePathTest.js:194:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "b43b8027-7dda-4647-a2ef-074930220fbf",
      "parentUUID": "75b9f804-3d8d-4a82-9b6f-1a19b36c4171",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "XII",
      "fullTitle": "Alternative Path, with Roman Numerals   XII",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "6866a08f-ecbf-460a-8003-b91de9de311e",
      "parentUUID": "25cef883-4872-454f-98e1-1f91c6c96421",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "XII =  ",
      "fullTitle": "Alternative Path, with Roman Numerals   XII =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:226:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "8bb0d8ec-0efa-4369-ba61-0ae59d64bf5c",
      "parentUUID": "25cef883-4872-454f-98e1-1f91c6c96421",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "'",
      "fullTitle": "Alternative Path, with special characters ', !, &  '",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a4c13823-2688-4b56-9d23-4767454b6eea",
      "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "' =  ",
      "fullTitle": "Alternative Path, with special characters ', !, &  ' =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:260:13)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "ece2ceb0-841a-4f4e-8cc2-3dce83250811",
      "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "!",
      "fullTitle": "Alternative Path, with special characters ', !, &  !",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "5ea51527-13c0-4196-9b84-fa6665939a44",
      "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "! =  ",
      "fullTitle": "Alternative Path, with special characters ', !, &  ! =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:260:13)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "b2e60ab6-34a8-4470-8336-bfc904eb1bbc",
      "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "&",
      "fullTitle": "Alternative Path, with special characters ', !, &  &",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "1b52bc97-f451-46e9-a044-c49e9d5819ab",
      "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "& =  ",
      "fullTitle": "Alternative Path, with special characters ', !, &  & =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:260:13)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "ecda6796-b832-4400-896d-f403f716d46e",
      "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "3fb00e81-82bb-447d-8d43-0a375443a62c",
      "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1 =  I",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1 =  I",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "4dbd5712-1e06-4331-b4e3-a949bccb4e45",
      "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "15",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "47001006-6099-449e-af44-96ab3f2b9cc8",
      "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "15 =  XV",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15 =  XV",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "49ca4681-d0b0-4dc7-885e-63930d9d0f07",
      "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "3999",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "77e13148-3a84-4a15-9607-2829bc421705",
      "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "3999 =  MMMCMXCIX",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999 =  MMMCMXCIX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "ca44a3d9-55de-4b0d-b87e-41550b452d72",
      "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "4",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "d8170591-f340-47be-b012-b267cc0e057e",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "4 =  IV",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4 =  IV",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "06b66f26-3fd9-47a8-b40c-2531303c0ab5",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "5",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "34c93f30-4bb7-4ec8-91a6-f77622bdf82d",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "5 =  V",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5 =  V",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "530fe799-31fe-46dd-86c6-d70d69460e45",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "c8f91e55-5b21-42b5-9d1a-14d2aace6898",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9 =  IX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9 =  IX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "88cc5cb2-63ea-497f-b8bb-bef439305145",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "10",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "dd33472d-ca28-45b4-b91f-c145589794fb",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "10 =  X",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10 =  X",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "e7fffb3c-3aca-462e-962f-774646bce31f",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "11",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "f65fdea8-9c56-404e-8a7b-259ab6e2f079",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "11 =  XI",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11 =  XI",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "a2efc7ca-e694-4731-be62-e81f1366f192",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "39",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "8a3b6142-3fcf-457b-a584-927232834116",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "39 =  XXXIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39 =  XXXIX",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "eff4ec36-75cc-4a8f-95bc-366988f8fbe4",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "40",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "50ebd00b-5609-4e7b-842a-31d067320bec",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "40 =  XL",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40 =  XL",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "76123d0e-8e96-4588-8cdd-48922cb781c9",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "41",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "37012329-dd81-445c-b41d-38a0d6f3c615",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "41 =  XLI",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41 =  XLI",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "e2b43b08-cee0-4528-b168-c4745557a377",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "89",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "14478858-2587-4b35-ab57-c6220a641bdb",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "89 =  LXXXIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89 =  LXXXIX",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "811a5f81-b1b9-4e11-ad68-6d902a92fb17",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "90",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90",
      "timedOut": false,
      "duration": 450,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "7611502f-94f7-405b-81cd-dc23adc297ae",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "90 =  XC",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90 =  XC",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "b1748998-f81c-4fb3-b6e5-ac883f2760dc",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "91",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "6c328126-a4f9-4c10-ba7c-9f76e07e3da2",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "91 =  XCI",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91 =  XCI",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "678385a9-29e3-4dc9-92d3-02c858fde90b",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "389",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "732dceff-0824-4ade-8841-b3a0253dd06f",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "389 =  CCCLXXXIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389 =  CCCLXXXIX",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "e945214a-a7d1-4fd7-8a98-aa3c8d0d1032",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "400",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "49f01441-0790-4e6f-bc6c-b7038fdceecb",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "400 =  CD",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400 =  CD",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "38066c3e-2b29-4801-8f23-cb80b3290950",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "450",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "ddd7d494-f17f-4ca3-8c71-dd8c5fb9a071",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "450 =  CDL",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450 =  CDL",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "544bc039-b749-416e-8adb-b4ddc72384be",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "899",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a5d54036-3f4c-4d70-9600-e449a6842307",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "899 =  DCCCXCIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899 =  DCCCXCIX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "c9007de8-86da-4ce6-ac1d-cc6f74a5ee84",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "900",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900",
      "timedOut": false,
      "duration": 458,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "d65c8e74-d51a-42f3-8146-75745016e49d",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "900 =  CM",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900 =  CM",
      "timedOut": false,
      "duration": 249,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "00829ca9-29b1-4709-84db-24b76b502edd",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "999",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "7fc33c2e-4fc8-40ee-8dfe-cf81e28e346a",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "999 =  CMXCIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999 =  CMXCIX",
      "timedOut": false,
      "duration": 256,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "0b7b6abd-0557-4d02-9c87-f43be070b927",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1200",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "de42758a-8a1b-4c3e-9c94-222179f232ad",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1200 =  MCC",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200 =  MCC",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "8f9829bd-abe8-43fa-bdf3-6a6a54d11635",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "0",
      "fullTitle": "Alternative Path, Check with 0 0",
      "timedOut": false,
      "duration": 260,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "d9ddc731-5115-49de-be53-38341719b5c6",
      "parentUUID": "497df46d-c85a-4fff-939e-bed391f04c7a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9800",
      "fullTitle": "Alternative Path, Check with 9800 9800",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "0d84261c-2d4e-4abb-925c-9abc3045ef88",
      "parentUUID": "13784555-effd-4023-a75c-7f3237d87f19",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "-3",
      "fullTitle": "Alternative Path, Check with -3 -3",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "1df7ab8f-77d5-40d6-91a7-2974ef1fee78",
      "parentUUID": "9d3ae2ec-e66e-4836-9560-13afd8c7ef0f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "No value",
      "fullTitle": "Alternative Path, Check with no values No value",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman();\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "8dd82dcd-70d8-457f-9aed-c276f30c7d0e",
      "parentUUID": "0612aca9-99e0-4a66-b628-c36141d0a2a0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "roman",
      "fullTitle": "Alternative Path, with chars  roman",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "4e3ef3d4-1c21-42ea-99bb-35877612cfc2",
      "parentUUID": "8c9e55f8-c9a6-4fcf-bd14-780f807871dc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "34.4",
      "fullTitle": "Alternative Path, with decimal values   34.4",
      "timedOut": false,
      "duration": 256,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "b214e33a-6da7-499b-93a7-7855df45ac08",
      "parentUUID": "75b9f804-3d8d-4a82-9b6f-1a19b36c4171",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "XII",
      "fullTitle": "Alternative Path, with Roman Numerals   XII",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "6866a08f-ecbf-460a-8003-b91de9de311e",
      "parentUUID": "25cef883-4872-454f-98e1-1f91c6c96421",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "'",
      "fullTitle": "Alternative Path, with special characters ', !, &  '",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a4c13823-2688-4b56-9d23-4767454b6eea",
      "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "!",
      "fullTitle": "Alternative Path, with special characters ', !, &  !",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "5ea51527-13c0-4196-9b84-fa6665939a44",
      "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "&",
      "fullTitle": "Alternative Path, with special characters ', !, &  &",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "1b52bc97-f451-46e9-a044-c49e9d5819ab",
      "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "3fb00e81-82bb-447d-8d43-0a375443a62c",
      "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1 =  I",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1 =  I",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "4dbd5712-1e06-4331-b4e3-a949bccb4e45",
      "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "15",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "47001006-6099-449e-af44-96ab3f2b9cc8",
      "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "15 =  XV",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15 =  XV",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "49ca4681-d0b0-4dc7-885e-63930d9d0f07",
      "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "3999",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "77e13148-3a84-4a15-9607-2829bc421705",
      "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "3999 =  MMMCMXCIX",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999 =  MMMCMXCIX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "ca44a3d9-55de-4b0d-b87e-41550b452d72",
      "parentUUID": "416432ab-2df7-4fe2-aeda-dc97ff1d402d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "4",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "d8170591-f340-47be-b012-b267cc0e057e",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "4 =  IV",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4 =  IV",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "06b66f26-3fd9-47a8-b40c-2531303c0ab5",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "5",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "34c93f30-4bb7-4ec8-91a6-f77622bdf82d",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "5 =  V",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5 =  V",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "530fe799-31fe-46dd-86c6-d70d69460e45",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "c8f91e55-5b21-42b5-9d1a-14d2aace6898",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9 =  IX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9 =  IX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "88cc5cb2-63ea-497f-b8bb-bef439305145",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "10",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "dd33472d-ca28-45b4-b91f-c145589794fb",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "10 =  X",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10 =  X",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "e7fffb3c-3aca-462e-962f-774646bce31f",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "11",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "f65fdea8-9c56-404e-8a7b-259ab6e2f079",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "11 =  XI",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11 =  XI",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "a2efc7ca-e694-4731-be62-e81f1366f192",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "39",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "8a3b6142-3fcf-457b-a584-927232834116",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "39 =  XXXIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39 =  XXXIX",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "eff4ec36-75cc-4a8f-95bc-366988f8fbe4",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "40",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "50ebd00b-5609-4e7b-842a-31d067320bec",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "40 =  XL",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40 =  XL",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "76123d0e-8e96-4588-8cdd-48922cb781c9",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "41",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "37012329-dd81-445c-b41d-38a0d6f3c615",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "41 =  XLI",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41 =  XLI",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "e2b43b08-cee0-4528-b168-c4745557a377",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "89",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "14478858-2587-4b35-ab57-c6220a641bdb",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "89 =  LXXXIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89 =  LXXXIX",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "811a5f81-b1b9-4e11-ad68-6d902a92fb17",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "90",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90",
      "timedOut": false,
      "duration": 450,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "7611502f-94f7-405b-81cd-dc23adc297ae",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "90 =  XC",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90 =  XC",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "b1748998-f81c-4fb3-b6e5-ac883f2760dc",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "91",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "6c328126-a4f9-4c10-ba7c-9f76e07e3da2",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "91 =  XCI",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91 =  XCI",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "678385a9-29e3-4dc9-92d3-02c858fde90b",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "389",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "732dceff-0824-4ade-8841-b3a0253dd06f",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "389 =  CCCLXXXIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389 =  CCCLXXXIX",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "e945214a-a7d1-4fd7-8a98-aa3c8d0d1032",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "400",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "49f01441-0790-4e6f-bc6c-b7038fdceecb",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "400 =  CD",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400 =  CD",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "38066c3e-2b29-4801-8f23-cb80b3290950",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "450",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "ddd7d494-f17f-4ca3-8c71-dd8c5fb9a071",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "450 =  CDL",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450 =  CDL",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "544bc039-b749-416e-8adb-b4ddc72384be",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "899",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a5d54036-3f4c-4d70-9600-e449a6842307",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "899 =  DCCCXCIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899 =  DCCCXCIX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "c9007de8-86da-4ce6-ac1d-cc6f74a5ee84",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "900",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900",
      "timedOut": false,
      "duration": 458,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "d65c8e74-d51a-42f3-8146-75745016e49d",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "900 =  CM",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900 =  CM",
      "timedOut": false,
      "duration": 249,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "00829ca9-29b1-4709-84db-24b76b502edd",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "999",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "7fc33c2e-4fc8-40ee-8dfe-cf81e28e346a",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "999 =  CMXCIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999 =  CMXCIX",
      "timedOut": false,
      "duration": 256,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "0b7b6abd-0557-4d02-9c87-f43be070b927",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1200",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "de42758a-8a1b-4c3e-9c94-222179f232ad",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1200 =  MCC",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200 =  MCC",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "8f9829bd-abe8-43fa-bdf3-6a6a54d11635",
      "parentUUID": "d25b667f-96d6-4775-adb8-70edcac67f8b",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "0 =  ",
      "fullTitle": "Alternative Path, Check with 0 0 =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError:  != undefined",
        "estack": "AssertionError:  != undefined\n    at Context.<anonymous> (test/AlternativePathTest.js:37:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "f8c080e7-6403-408c-9a54-81d98172d86d",
      "parentUUID": "497df46d-c85a-4fff-939e-bed391f04c7a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9800 =  MMMMMMMMMDCCC",
      "fullTitle": "Alternative Path, Check with 9800 9800 =  MMMMMMMMMDCCC",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: MMMMMMMMMDCCC != ",
        "estack": "AssertionError: MMMMMMMMMDCCC != \n    at Context.<anonymous> (test/AlternativePathTest.js:69:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "13f5f827-8b8d-4a96-9d9b-bffea81340c5",
      "parentUUID": "13784555-effd-4023-a75c-7f3237d87f19",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "-3 =  ",
      "fullTitle": "Alternative Path, Check with -3 -3 =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:101:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "d656e8d5-dcb5-4045-9df5-f7c2c1937fbf",
      "parentUUID": "9d3ae2ec-e66e-4836-9560-13afd8c7ef0f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Enter a value",
      "fullTitle": "Alternative Path, Check with no values Enter a value",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:131:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "f242c8d1-e093-4e7a-801c-0b25d4b11db9",
      "parentUUID": "0612aca9-99e0-4a66-b628-c36141d0a2a0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "roman =  ",
      "fullTitle": "Alternative Path, with chars  roman =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:163:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "18b632fe-70fb-4285-a428-022cacce27ed",
      "parentUUID": "8c9e55f8-c9a6-4fcf-bd14-780f807871dc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "34.4 =  ",
      "fullTitle": "Alternative Path, with decimal values   34.4 =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError:  != XXXIV",
        "estack": "AssertionError:  != XXXIV\n    at Context.<anonymous> (test/AlternativePathTest.js:194:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "b43b8027-7dda-4647-a2ef-074930220fbf",
      "parentUUID": "75b9f804-3d8d-4a82-9b6f-1a19b36c4171",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "XII =  ",
      "fullTitle": "Alternative Path, with Roman Numerals   XII =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:226:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "8bb0d8ec-0efa-4369-ba61-0ae59d64bf5c",
      "parentUUID": "25cef883-4872-454f-98e1-1f91c6c96421",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "' =  ",
      "fullTitle": "Alternative Path, with special characters ', !, &  ' =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:260:13)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "ece2ceb0-841a-4f4e-8cc2-3dce83250811",
      "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "! =  ",
      "fullTitle": "Alternative Path, with special characters ', !, &  ! =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:260:13)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "b2e60ab6-34a8-4470-8336-bfc904eb1bbc",
      "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "& =  ",
      "fullTitle": "Alternative Path, with special characters ', !, &  & =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:260:13)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "ecda6796-b832-4400-896d-f403f716d46e",
      "parentUUID": "34d48b2f-3a9d-454b-89f8-55a0a9e10261",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}