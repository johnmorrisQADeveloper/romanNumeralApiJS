{
  "stats": {
    "suites": 10,
    "tests": 62,
    "passes": 53,
    "pending": 0,
    "failures": 9,
    "start": "2017-07-30T06:05:40.522Z",
    "end": "2017-07-30T06:05:58.842Z",
    "duration": 18320,
    "testsRegistered": 62,
    "passPercent": 85.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Alternative Path, Check with 0",
        "suites": [],
        "tests": [
          {
            "title": "0",
            "fullTitle": "Alternative Path, Check with 0 0",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "2b8a1fbd-8334-4826-b893-f4df2c4df750",
            "parentUUID": "f9b6a582-6f62-4b52-b643-8182d9e3a212",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "0 =  ",
            "fullTitle": "Alternative Path, Check with 0 0 =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:114:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "4b13bef8-caa7-4a4a-90c8-fc5cdf954f30",
            "parentUUID": "f9b6a582-6f62-4b52-b643-8182d9e3a212",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "f9b6a582-6f62-4b52-b643-8182d9e3a212",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "0",
            "fullTitle": "Alternative Path, Check with 0 0",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "2b8a1fbd-8334-4826-b893-f4df2c4df750",
            "parentUUID": "f9b6a582-6f62-4b52-b643-8182d9e3a212",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "0 =  ",
            "fullTitle": "Alternative Path, Check with 0 0 =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:114:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "4b13bef8-caa7-4a4a-90c8-fc5cdf954f30",
            "parentUUID": "f9b6a582-6f62-4b52-b643-8182d9e3a212",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 263,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, Check with 9800",
        "suites": [],
        "tests": [
          {
            "title": "9800",
            "fullTitle": "Alternative Path, Check with 9800 9800",
            "timedOut": false,
            "duration": 256,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "fb5142c8-f45b-4a88-8211-8b164ecf2724",
            "parentUUID": "3913bede-a61d-4401-a0c7-0f348685fbad",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "9800 =  MMMMMMMMMDCCC",
            "fullTitle": "Alternative Path, Check with 9800 9800 =  MMMMMMMMMDCCC",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: MMMMMMMMMDCCC != ",
              "estack": "AssertionError: MMMMMMMMMDCCC != \n    at Context.<anonymous> (test/AlternativePathTest.js:145:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "3c6f19b1-ead3-4ea1-8638-0f8e472e22a5",
            "parentUUID": "3913bede-a61d-4401-a0c7-0f348685fbad",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "3913bede-a61d-4401-a0c7-0f348685fbad",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "9800",
            "fullTitle": "Alternative Path, Check with 9800 9800",
            "timedOut": false,
            "duration": 256,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "fb5142c8-f45b-4a88-8211-8b164ecf2724",
            "parentUUID": "3913bede-a61d-4401-a0c7-0f348685fbad",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "9800 =  MMMMMMMMMDCCC",
            "fullTitle": "Alternative Path, Check with 9800 9800 =  MMMMMMMMMDCCC",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: MMMMMMMMMDCCC != ",
              "estack": "AssertionError: MMMMMMMMMDCCC != \n    at Context.<anonymous> (test/AlternativePathTest.js:145:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "3c6f19b1-ead3-4ea1-8638-0f8e472e22a5",
            "parentUUID": "3913bede-a61d-4401-a0c7-0f348685fbad",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 256,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, Check with -3",
        "suites": [],
        "tests": [
          {
            "title": "-3",
            "fullTitle": "Alternative Path, Check with -3 -3",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "0dd9048d-7e3c-4e20-98be-02ec11284712",
            "parentUUID": "ae67e1e3-cebe-4709-b32e-1c979817d530",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "-3 =  ",
            "fullTitle": "Alternative Path, Check with -3 -3 =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:177:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "840502f5-9e26-4c3e-b644-9763bb3f7bfc",
            "parentUUID": "ae67e1e3-cebe-4709-b32e-1c979817d530",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "ae67e1e3-cebe-4709-b32e-1c979817d530",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "-3",
            "fullTitle": "Alternative Path, Check with -3 -3",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "0dd9048d-7e3c-4e20-98be-02ec11284712",
            "parentUUID": "ae67e1e3-cebe-4709-b32e-1c979817d530",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "-3 =  ",
            "fullTitle": "Alternative Path, Check with -3 -3 =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:177:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "840502f5-9e26-4c3e-b644-9763bb3f7bfc",
            "parentUUID": "ae67e1e3-cebe-4709-b32e-1c979817d530",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 252,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, Check with no values",
        "suites": [],
        "tests": [
          {
            "title": "No value",
            "fullTitle": "Alternative Path, Check with no values No value",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman();\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "709d8b48-2199-4042-956e-d335b4e3822d",
            "parentUUID": "703bf797-f2f6-438f-bad3-d817b2493427",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Enter a value",
            "fullTitle": "Alternative Path, Check with no values Enter a value",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:207:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "9a0ae376-f6ad-4fe2-b718-ebd45229eb6f",
            "parentUUID": "703bf797-f2f6-438f-bad3-d817b2493427",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "703bf797-f2f6-438f-bad3-d817b2493427",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "No value",
            "fullTitle": "Alternative Path, Check with no values No value",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman();\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "709d8b48-2199-4042-956e-d335b4e3822d",
            "parentUUID": "703bf797-f2f6-438f-bad3-d817b2493427",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "Enter a value",
            "fullTitle": "Alternative Path, Check with no values Enter a value",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:207:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "9a0ae376-f6ad-4fe2-b718-ebd45229eb6f",
            "parentUUID": "703bf797-f2f6-438f-bad3-d817b2493427",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 255,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, with chars ",
        "suites": [],
        "tests": [
          {
            "title": "roman",
            "fullTitle": "Alternative Path, with chars  roman",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "21589b7d-41c3-46b6-a6fd-b5b06602b2c6",
            "parentUUID": "010cca88-8700-4eb7-b4c3-0c7793a38cef",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "roman =  ",
            "fullTitle": "Alternative Path, with chars  roman =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:239:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "fcb2d882-7a72-4985-9b95-2fc95dc759f0",
            "parentUUID": "010cca88-8700-4eb7-b4c3-0c7793a38cef",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "010cca88-8700-4eb7-b4c3-0c7793a38cef",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "roman",
            "fullTitle": "Alternative Path, with chars  roman",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "21589b7d-41c3-46b6-a6fd-b5b06602b2c6",
            "parentUUID": "010cca88-8700-4eb7-b4c3-0c7793a38cef",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "roman =  ",
            "fullTitle": "Alternative Path, with chars  roman =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:239:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "fcb2d882-7a72-4985-9b95-2fc95dc759f0",
            "parentUUID": "010cca88-8700-4eb7-b4c3-0c7793a38cef",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 253,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, with decimal values  ",
        "suites": [],
        "tests": [
          {
            "title": "34.4",
            "fullTitle": "Alternative Path, with decimal values   34.4",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "c2c3fbe0-4262-4f36-98ca-12e638ee6203",
            "parentUUID": "9e71a0a5-ba2b-49f0-8bba-c399a9d3d8d1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "34.4 =  XXXIV",
            "fullTitle": "Alternative Path, with decimal values   34.4 =  XXXIV",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "caca9e47-b034-46c6-9e33-a303c6986540",
            "parentUUID": "9e71a0a5-ba2b-49f0-8bba-c399a9d3d8d1",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "9e71a0a5-ba2b-49f0-8bba-c399a9d3d8d1",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "34.4",
            "fullTitle": "Alternative Path, with decimal values   34.4",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "c2c3fbe0-4262-4f36-98ca-12e638ee6203",
            "parentUUID": "9e71a0a5-ba2b-49f0-8bba-c399a9d3d8d1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "34.4 =  XXXIV",
            "fullTitle": "Alternative Path, with decimal values   34.4 =  XXXIV",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "caca9e47-b034-46c6-9e33-a303c6986540",
            "parentUUID": "9e71a0a5-ba2b-49f0-8bba-c399a9d3d8d1",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 510,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, with Roman Numerals  ",
        "suites": [],
        "tests": [
          {
            "title": "XII",
            "fullTitle": "Alternative Path, with Roman Numerals   XII",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "65429856-9a99-4a24-92b7-25a0ca2e78da",
            "parentUUID": "db5d022a-5482-4f14-abcc-9f0900f7316a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "XII =  ",
            "fullTitle": "Alternative Path, with Roman Numerals   XII =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:302:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "cdef44c3-4539-40f6-98a9-4cbbb0277ed8",
            "parentUUID": "db5d022a-5482-4f14-abcc-9f0900f7316a",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "db5d022a-5482-4f14-abcc-9f0900f7316a",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "XII",
            "fullTitle": "Alternative Path, with Roman Numerals   XII",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "65429856-9a99-4a24-92b7-25a0ca2e78da",
            "parentUUID": "db5d022a-5482-4f14-abcc-9f0900f7316a",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "XII =  ",
            "fullTitle": "Alternative Path, with Roman Numerals   XII =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:302:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "cdef44c3-4539-40f6-98a9-4cbbb0277ed8",
            "parentUUID": "db5d022a-5482-4f14-abcc-9f0900f7316a",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 255,
        "rootEmpty": false
      },
      {
        "title": "Alternative Path, with special characters ', !, & ",
        "suites": [],
        "tests": [
          {
            "title": "'",
            "fullTitle": "Alternative Path, with special characters ', !, &  '",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "6462cec9-eba9-45cb-99e5-f268268d87e0",
            "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "' =  ",
            "fullTitle": "Alternative Path, with special characters ', !, &  ' =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:336:13)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "45e7e8dc-2efc-4811-b292-17eb1b4ad330",
            "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "!",
            "fullTitle": "Alternative Path, with special characters ', !, &  !",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "b787ab15-95b7-4262-a691-601e7005ffd5",
            "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "! =  ",
            "fullTitle": "Alternative Path, with special characters ', !, &  ! =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:336:13)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "f8b6066f-fb76-49be-be4e-89cef51ac1bc",
            "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "&",
            "fullTitle": "Alternative Path, with special characters ', !, &  &",
            "timedOut": false,
            "duration": 456,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "4daa89b3-5a4c-4f4e-a117-130f831872d1",
            "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "& =  ",
            "fullTitle": "Alternative Path, with special characters ', !, &  & =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:336:13)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "8c965a76-38e3-44f6-a201-fad9c846cba0",
            "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AlternativePathTest.js",
        "uuid": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/AlternativePathTest.js",
        "passes": [
          {
            "title": "'",
            "fullTitle": "Alternative Path, with special characters ', !, &  '",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "6462cec9-eba9-45cb-99e5-f268268d87e0",
            "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "!",
            "fullTitle": "Alternative Path, with special characters ', !, &  !",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "b787ab15-95b7-4262-a691-601e7005ffd5",
            "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "&",
            "fullTitle": "Alternative Path, with special characters ', !, &  &",
            "timedOut": false,
            "duration": 456,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "4daa89b3-5a4c-4f4e-a117-130f831872d1",
            "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "' =  ",
            "fullTitle": "Alternative Path, with special characters ', !, &  ' =  ",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:336:13)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "45e7e8dc-2efc-4811-b292-17eb1b4ad330",
            "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "! =  ",
            "fullTitle": "Alternative Path, with special characters ', !, &  ! =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:336:13)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "f8b6066f-fb76-49be-be4e-89cef51ac1bc",
            "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "& =  ",
            "fullTitle": "Alternative Path, with special characters ', !, &  & =  ",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:336:13)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "8c965a76-38e3-44f6-a201-fad9c846cba0",
            "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 3,
        "totalFailures": 3,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1362,
        "rootEmpty": false
      },
      {
        "title": "Main Path, Inner Boundary Values {1-3999}",
        "suites": [],
        "tests": [
          {
            "title": "1",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1",
            "timedOut": false,
            "duration": 456,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "e25af5f8-ed55-418b-8639-70c542c61159",
            "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "1 =  I",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1 =  I",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "1a3a00b8-bc75-47dc-8189-320e98f6259b",
            "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "15",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15",
            "timedOut": false,
            "duration": 457,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a8e7812e-0fe5-4289-b27f-f6393f248517",
            "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "15 =  XV",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15 =  XV",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "dfdfbe4f-ea60-41ac-9716-c696c06a5a1e",
            "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "3999",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "5009958d-f1d7-473b-a183-493441b1a0bd",
            "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "3999 =  MMMCMXCIX",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999 =  MMMCMXCIX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "661d580c-085e-481e-902d-6292d6afcda4",
            "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/allTest.js",
        "uuid": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/allTest.js",
        "passes": [
          {
            "title": "1",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1",
            "timedOut": false,
            "duration": 456,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "e25af5f8-ed55-418b-8639-70c542c61159",
            "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "1 =  I",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1 =  I",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "1a3a00b8-bc75-47dc-8189-320e98f6259b",
            "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "15",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15",
            "timedOut": false,
            "duration": 457,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a8e7812e-0fe5-4289-b27f-f6393f248517",
            "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "15 =  XV",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15 =  XV",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "dfdfbe4f-ea60-41ac-9716-c696c06a5a1e",
            "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "3999",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "5009958d-f1d7-473b-a183-493441b1a0bd",
            "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "3999 =  MMMCMXCIX",
            "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999 =  MMMCMXCIX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "661d580c-085e-481e-902d-6292d6afcda4",
            "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2127,
        "rootEmpty": false
      },
      {
        "title": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1}",
        "suites": [],
        "tests": [
          {
            "title": "4",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4",
            "timedOut": false,
            "duration": 455,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "b8696d45-4b60-4e3a-9a77-a7c8c21726b1",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "4 =  IV",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4 =  IV",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "68b377c6-06fa-4af8-9f5f-c94e117f4f3a",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "5",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5",
            "timedOut": false,
            "duration": 457,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "bb92aeb8-875b-42a2-a6a3-17dd8af62440",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "5 =  V",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5 =  V",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "bf15ecc2-080f-435a-9e1a-c867ead5e4a5",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "9",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a62cfd12-489a-427c-937c-f77dfabea8a7",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "9 =  IX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9 =  IX",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "6e27296f-b645-4f6e-8243-480a009b3793",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "10",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10",
            "timedOut": false,
            "duration": 450,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "da4ace96-0ca7-4bd5-9e79-2d879e3c8d58",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "10 =  X",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10 =  X",
            "timedOut": false,
            "duration": 256,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "9af5739d-ca5c-4c5e-b8ea-333dd1f5050e",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "11",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11",
            "timedOut": false,
            "duration": 455,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "9822f03a-f045-4491-a80e-5f60b23ca113",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "11 =  XI",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11 =  XI",
            "timedOut": false,
            "duration": 256,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "ca20770a-976d-401e-a15d-fcb691b880b9",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "39",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "9c16ea45-8512-4ed1-91c8-902425ecfce3",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "39 =  XXXIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39 =  XXXIX",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "e8eeb4d1-c5c9-44cf-ad2d-a8df16a0e528",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "40",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40",
            "timedOut": false,
            "duration": 456,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "7761c9aa-bf47-4683-8dae-d48db85b7888",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "40 =  XL",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40 =  XL",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "abc86dd4-4fca-441d-b125-f9708c5036fa",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "41",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "2c9e2ea5-630b-4a46-8cde-a38404e221aa",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "41 =  XLI",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41 =  XLI",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "9e65b1d7-e7e3-4d10-b2fd-c7bd1a8e7c3f",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "89",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89",
            "timedOut": false,
            "duration": 456,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a9225e3d-5a06-4402-b960-57b29d6e70ed",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "89 =  LXXXIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89 =  LXXXIX",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "07f09b03-0cbb-43d9-a36d-e3a1db413de3",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "90",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "259f85a6-1ab1-49b7-846c-895b292d9ac5",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "90 =  XC",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90 =  XC",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "c6149547-750b-4f7f-8f8a-3a388faffa59",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "91",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "cbd3aadc-2ff1-4ff6-840c-71226c59d4e9",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "91 =  XCI",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91 =  XCI",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "43a5e17d-5519-4c15-b0d1-bdedc6296035",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "389",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "2af5d474-c68f-4421-95d6-5b57afc18ce6",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "389 =  CCCLXXXIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389 =  CCCLXXXIX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "9ee8258f-d821-478f-b9e4-02d8e9f65598",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "400",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "13cd290d-6797-47e8-8679-3cf303c861c8",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "400 =  CD",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400 =  CD",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "93357cb8-f346-4b8f-a72f-04bf5a8b6f3c",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "450",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a3d7df90-a9ff-4f13-b8d4-9649521a4b27",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "450 =  CDL",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450 =  CDL",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "06ddb473-a187-4cbe-a917-abd7758a524f",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "899",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899",
            "timedOut": false,
            "duration": 456,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "da9afba5-e74e-4107-81a2-2292ee8b5d79",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "899 =  DCCCXCIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899 =  DCCCXCIX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "576bfaa9-e89d-4fc3-8c01-ed6ba88f763f",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "900",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "e09105db-7882-4741-a554-1fd52b05886a",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "900 =  CM",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900 =  CM",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "77b0c6ce-8251-44ed-b03a-e44bdaf06e95",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "999",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "39298e48-90ed-4b17-b8b6-09d6b3d2a6ab",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "999 =  CMXCIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999 =  CMXCIX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "c4f29b0d-f859-40c5-9a37-523e50eaa2dc",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "1200",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a9791310-3261-46ad-bb97-f78f1a4aa723",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "1200 =  MCC",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200 =  MCC",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "ff14b6c1-89fa-4b88-af51-c62b3001c6cc",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/allTest.js",
        "uuid": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/allTest.js",
        "passes": [
          {
            "title": "4",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4",
            "timedOut": false,
            "duration": 455,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "b8696d45-4b60-4e3a-9a77-a7c8c21726b1",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "4 =  IV",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4 =  IV",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "68b377c6-06fa-4af8-9f5f-c94e117f4f3a",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "5",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5",
            "timedOut": false,
            "duration": 457,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "bb92aeb8-875b-42a2-a6a3-17dd8af62440",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "5 =  V",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5 =  V",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "bf15ecc2-080f-435a-9e1a-c867ead5e4a5",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "9",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a62cfd12-489a-427c-937c-f77dfabea8a7",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "9 =  IX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9 =  IX",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "6e27296f-b645-4f6e-8243-480a009b3793",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "10",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10",
            "timedOut": false,
            "duration": 450,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "da4ace96-0ca7-4bd5-9e79-2d879e3c8d58",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "10 =  X",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10 =  X",
            "timedOut": false,
            "duration": 256,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "9af5739d-ca5c-4c5e-b8ea-333dd1f5050e",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "11",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11",
            "timedOut": false,
            "duration": 455,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "9822f03a-f045-4491-a80e-5f60b23ca113",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "11 =  XI",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11 =  XI",
            "timedOut": false,
            "duration": 256,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "ca20770a-976d-401e-a15d-fcb691b880b9",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "39",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "9c16ea45-8512-4ed1-91c8-902425ecfce3",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "39 =  XXXIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39 =  XXXIX",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "e8eeb4d1-c5c9-44cf-ad2d-a8df16a0e528",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "40",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40",
            "timedOut": false,
            "duration": 456,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "7761c9aa-bf47-4683-8dae-d48db85b7888",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "40 =  XL",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40 =  XL",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "abc86dd4-4fca-441d-b125-f9708c5036fa",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "41",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "2c9e2ea5-630b-4a46-8cde-a38404e221aa",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "41 =  XLI",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41 =  XLI",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "9e65b1d7-e7e3-4d10-b2fd-c7bd1a8e7c3f",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "89",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89",
            "timedOut": false,
            "duration": 456,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a9225e3d-5a06-4402-b960-57b29d6e70ed",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "89 =  LXXXIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89 =  LXXXIX",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "07f09b03-0cbb-43d9-a36d-e3a1db413de3",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "90",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "259f85a6-1ab1-49b7-846c-895b292d9ac5",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "90 =  XC",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90 =  XC",
            "timedOut": false,
            "duration": 252,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "c6149547-750b-4f7f-8f8a-3a388faffa59",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "91",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "cbd3aadc-2ff1-4ff6-840c-71226c59d4e9",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "91 =  XCI",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91 =  XCI",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "43a5e17d-5519-4c15-b0d1-bdedc6296035",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "389",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "2af5d474-c68f-4421-95d6-5b57afc18ce6",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "389 =  CCCLXXXIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389 =  CCCLXXXIX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "9ee8258f-d821-478f-b9e4-02d8e9f65598",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "400",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "13cd290d-6797-47e8-8679-3cf303c861c8",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "400 =  CD",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400 =  CD",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "93357cb8-f346-4b8f-a72f-04bf5a8b6f3c",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "450",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a3d7df90-a9ff-4f13-b8d4-9649521a4b27",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "450 =  CDL",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450 =  CDL",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "06ddb473-a187-4cbe-a917-abd7758a524f",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "899",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899",
            "timedOut": false,
            "duration": 456,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "da9afba5-e74e-4107-81a2-2292ee8b5d79",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "899 =  DCCCXCIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899 =  DCCCXCIX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "576bfaa9-e89d-4fc3-8c01-ed6ba88f763f",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "900",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "e09105db-7882-4741-a554-1fd52b05886a",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "900 =  CM",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900 =  CM",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "77b0c6ce-8251-44ed-b03a-e44bdaf06e95",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "999",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999",
            "timedOut": false,
            "duration": 454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "39298e48-90ed-4b17-b8b6-09d6b3d2a6ab",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "999 =  CMXCIX",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999 =  CMXCIX",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "c4f29b0d-f859-40c5-9a37-523e50eaa2dc",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "1200",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200",
            "timedOut": false,
            "duration": 453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
            "err": {},
            "isRoot": false,
            "uuid": "a9791310-3261-46ad-bb97-f78f1a4aa723",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "1200 =  MCC",
            "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200 =  MCC",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
            "err": {},
            "isRoot": false,
            "uuid": "ff14b6c1-89fa-4b88-af51-c62b3001c6cc",
            "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 36,
        "totalPasses": 36,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 12731,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "cf80dbef-29ba-4da4-a429-550b0cb4ed28",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "0",
      "fullTitle": "Alternative Path, Check with 0 0",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "2b8a1fbd-8334-4826-b893-f4df2c4df750",
      "parentUUID": "f9b6a582-6f62-4b52-b643-8182d9e3a212",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "0 =  ",
      "fullTitle": "Alternative Path, Check with 0 0 =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:114:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "4b13bef8-caa7-4a4a-90c8-fc5cdf954f30",
      "parentUUID": "f9b6a582-6f62-4b52-b643-8182d9e3a212",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9800",
      "fullTitle": "Alternative Path, Check with 9800 9800",
      "timedOut": false,
      "duration": 256,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "fb5142c8-f45b-4a88-8211-8b164ecf2724",
      "parentUUID": "3913bede-a61d-4401-a0c7-0f348685fbad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9800 =  MMMMMMMMMDCCC",
      "fullTitle": "Alternative Path, Check with 9800 9800 =  MMMMMMMMMDCCC",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: MMMMMMMMMDCCC != ",
        "estack": "AssertionError: MMMMMMMMMDCCC != \n    at Context.<anonymous> (test/AlternativePathTest.js:145:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "3c6f19b1-ead3-4ea1-8638-0f8e472e22a5",
      "parentUUID": "3913bede-a61d-4401-a0c7-0f348685fbad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "-3",
      "fullTitle": "Alternative Path, Check with -3 -3",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "0dd9048d-7e3c-4e20-98be-02ec11284712",
      "parentUUID": "ae67e1e3-cebe-4709-b32e-1c979817d530",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "-3 =  ",
      "fullTitle": "Alternative Path, Check with -3 -3 =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:177:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "840502f5-9e26-4c3e-b644-9763bb3f7bfc",
      "parentUUID": "ae67e1e3-cebe-4709-b32e-1c979817d530",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "No value",
      "fullTitle": "Alternative Path, Check with no values No value",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman();\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "709d8b48-2199-4042-956e-d335b4e3822d",
      "parentUUID": "703bf797-f2f6-438f-bad3-d817b2493427",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Enter a value",
      "fullTitle": "Alternative Path, Check with no values Enter a value",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:207:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "9a0ae376-f6ad-4fe2-b718-ebd45229eb6f",
      "parentUUID": "703bf797-f2f6-438f-bad3-d817b2493427",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "roman",
      "fullTitle": "Alternative Path, with chars  roman",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "21589b7d-41c3-46b6-a6fd-b5b06602b2c6",
      "parentUUID": "010cca88-8700-4eb7-b4c3-0c7793a38cef",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "roman =  ",
      "fullTitle": "Alternative Path, with chars  roman =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:239:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "fcb2d882-7a72-4985-9b95-2fc95dc759f0",
      "parentUUID": "010cca88-8700-4eb7-b4c3-0c7793a38cef",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "34.4",
      "fullTitle": "Alternative Path, with decimal values   34.4",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "c2c3fbe0-4262-4f36-98ca-12e638ee6203",
      "parentUUID": "9e71a0a5-ba2b-49f0-8bba-c399a9d3d8d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "34.4 =  XXXIV",
      "fullTitle": "Alternative Path, with decimal values   34.4 =  XXXIV",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "caca9e47-b034-46c6-9e33-a303c6986540",
      "parentUUID": "9e71a0a5-ba2b-49f0-8bba-c399a9d3d8d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "XII",
      "fullTitle": "Alternative Path, with Roman Numerals   XII",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "65429856-9a99-4a24-92b7-25a0ca2e78da",
      "parentUUID": "db5d022a-5482-4f14-abcc-9f0900f7316a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "XII =  ",
      "fullTitle": "Alternative Path, with Roman Numerals   XII =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:302:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "cdef44c3-4539-40f6-98a9-4cbbb0277ed8",
      "parentUUID": "db5d022a-5482-4f14-abcc-9f0900f7316a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "'",
      "fullTitle": "Alternative Path, with special characters ', !, &  '",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "6462cec9-eba9-45cb-99e5-f268268d87e0",
      "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "' =  ",
      "fullTitle": "Alternative Path, with special characters ', !, &  ' =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:336:13)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "45e7e8dc-2efc-4811-b292-17eb1b4ad330",
      "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "!",
      "fullTitle": "Alternative Path, with special characters ', !, &  !",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "b787ab15-95b7-4262-a691-601e7005ffd5",
      "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "! =  ",
      "fullTitle": "Alternative Path, with special characters ', !, &  ! =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:336:13)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "f8b6066f-fb76-49be-be4e-89cef51ac1bc",
      "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "&",
      "fullTitle": "Alternative Path, with special characters ', !, &  &",
      "timedOut": false,
      "duration": 456,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "4daa89b3-5a4c-4f4e-a117-130f831872d1",
      "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "& =  ",
      "fullTitle": "Alternative Path, with special characters ', !, &  & =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:336:13)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "8c965a76-38e3-44f6-a201-fad9c846cba0",
      "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1",
      "timedOut": false,
      "duration": 456,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "e25af5f8-ed55-418b-8639-70c542c61159",
      "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1 =  I",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1 =  I",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "1a3a00b8-bc75-47dc-8189-320e98f6259b",
      "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "15",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15",
      "timedOut": false,
      "duration": 457,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a8e7812e-0fe5-4289-b27f-f6393f248517",
      "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "15 =  XV",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15 =  XV",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "dfdfbe4f-ea60-41ac-9716-c696c06a5a1e",
      "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "3999",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "5009958d-f1d7-473b-a183-493441b1a0bd",
      "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "3999 =  MMMCMXCIX",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999 =  MMMCMXCIX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "661d580c-085e-481e-902d-6292d6afcda4",
      "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "4",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4",
      "timedOut": false,
      "duration": 455,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "b8696d45-4b60-4e3a-9a77-a7c8c21726b1",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "4 =  IV",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4 =  IV",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "68b377c6-06fa-4af8-9f5f-c94e117f4f3a",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "5",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5",
      "timedOut": false,
      "duration": 457,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "bb92aeb8-875b-42a2-a6a3-17dd8af62440",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "5 =  V",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5 =  V",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "bf15ecc2-080f-435a-9e1a-c867ead5e4a5",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a62cfd12-489a-427c-937c-f77dfabea8a7",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9 =  IX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9 =  IX",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "6e27296f-b645-4f6e-8243-480a009b3793",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "10",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10",
      "timedOut": false,
      "duration": 450,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "da4ace96-0ca7-4bd5-9e79-2d879e3c8d58",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "10 =  X",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10 =  X",
      "timedOut": false,
      "duration": 256,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "9af5739d-ca5c-4c5e-b8ea-333dd1f5050e",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "11",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11",
      "timedOut": false,
      "duration": 455,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "9822f03a-f045-4491-a80e-5f60b23ca113",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "11 =  XI",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11 =  XI",
      "timedOut": false,
      "duration": 256,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "ca20770a-976d-401e-a15d-fcb691b880b9",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "39",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "9c16ea45-8512-4ed1-91c8-902425ecfce3",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "39 =  XXXIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39 =  XXXIX",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "e8eeb4d1-c5c9-44cf-ad2d-a8df16a0e528",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "40",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40",
      "timedOut": false,
      "duration": 456,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "7761c9aa-bf47-4683-8dae-d48db85b7888",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "40 =  XL",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40 =  XL",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "abc86dd4-4fca-441d-b125-f9708c5036fa",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "41",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "2c9e2ea5-630b-4a46-8cde-a38404e221aa",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "41 =  XLI",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41 =  XLI",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "9e65b1d7-e7e3-4d10-b2fd-c7bd1a8e7c3f",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "89",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89",
      "timedOut": false,
      "duration": 456,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a9225e3d-5a06-4402-b960-57b29d6e70ed",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "89 =  LXXXIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89 =  LXXXIX",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "07f09b03-0cbb-43d9-a36d-e3a1db413de3",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "90",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "259f85a6-1ab1-49b7-846c-895b292d9ac5",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "90 =  XC",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90 =  XC",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "c6149547-750b-4f7f-8f8a-3a388faffa59",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "91",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "cbd3aadc-2ff1-4ff6-840c-71226c59d4e9",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "91 =  XCI",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91 =  XCI",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "43a5e17d-5519-4c15-b0d1-bdedc6296035",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "389",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "2af5d474-c68f-4421-95d6-5b57afc18ce6",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "389 =  CCCLXXXIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389 =  CCCLXXXIX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "9ee8258f-d821-478f-b9e4-02d8e9f65598",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "400",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "13cd290d-6797-47e8-8679-3cf303c861c8",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "400 =  CD",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400 =  CD",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "93357cb8-f346-4b8f-a72f-04bf5a8b6f3c",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "450",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a3d7df90-a9ff-4f13-b8d4-9649521a4b27",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "450 =  CDL",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450 =  CDL",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "06ddb473-a187-4cbe-a917-abd7758a524f",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "899",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899",
      "timedOut": false,
      "duration": 456,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "da9afba5-e74e-4107-81a2-2292ee8b5d79",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "899 =  DCCCXCIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899 =  DCCCXCIX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "576bfaa9-e89d-4fc3-8c01-ed6ba88f763f",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "900",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "e09105db-7882-4741-a554-1fd52b05886a",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "900 =  CM",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900 =  CM",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "77b0c6ce-8251-44ed-b03a-e44bdaf06e95",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "999",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "39298e48-90ed-4b17-b8b6-09d6b3d2a6ab",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "999 =  CMXCIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999 =  CMXCIX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "c4f29b0d-f859-40c5-9a37-523e50eaa2dc",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1200",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a9791310-3261-46ad-bb97-f78f1a4aa723",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1200 =  MCC",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200 =  MCC",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "ff14b6c1-89fa-4b88-af51-c62b3001c6cc",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "0",
      "fullTitle": "Alternative Path, Check with 0 0",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "2b8a1fbd-8334-4826-b893-f4df2c4df750",
      "parentUUID": "f9b6a582-6f62-4b52-b643-8182d9e3a212",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9800",
      "fullTitle": "Alternative Path, Check with 9800 9800",
      "timedOut": false,
      "duration": 256,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "fb5142c8-f45b-4a88-8211-8b164ecf2724",
      "parentUUID": "3913bede-a61d-4401-a0c7-0f348685fbad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "-3",
      "fullTitle": "Alternative Path, Check with -3 -3",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "0dd9048d-7e3c-4e20-98be-02ec11284712",
      "parentUUID": "ae67e1e3-cebe-4709-b32e-1c979817d530",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "No value",
      "fullTitle": "Alternative Path, Check with no values No value",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman();\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "709d8b48-2199-4042-956e-d335b4e3822d",
      "parentUUID": "703bf797-f2f6-438f-bad3-d817b2493427",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "roman",
      "fullTitle": "Alternative Path, with chars  roman",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "21589b7d-41c3-46b6-a6fd-b5b06602b2c6",
      "parentUUID": "010cca88-8700-4eb7-b4c3-0c7793a38cef",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "34.4",
      "fullTitle": "Alternative Path, with decimal values   34.4",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "c2c3fbe0-4262-4f36-98ca-12e638ee6203",
      "parentUUID": "9e71a0a5-ba2b-49f0-8bba-c399a9d3d8d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "34.4 =  XXXIV",
      "fullTitle": "Alternative Path, with decimal values   34.4 =  XXXIV",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "caca9e47-b034-46c6-9e33-a303c6986540",
      "parentUUID": "9e71a0a5-ba2b-49f0-8bba-c399a9d3d8d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "XII",
      "fullTitle": "Alternative Path, with Roman Numerals   XII",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(350);\nrequest(endPoint + value, function (error, response, body) {\n        if (debugg) {\n            console.log('error             :', error);\n            console.log('statusCode        :', response.statusCode);\n        }\n        expectedRoman = romanApi.data.intToRoman(value);\n        actualRoman = body;\n    }\n);\nsetTimeout(done, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "65429856-9a99-4a24-92b7-25a0ca2e78da",
      "parentUUID": "db5d022a-5482-4f14-abcc-9f0900f7316a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "'",
      "fullTitle": "Alternative Path, with special characters ', !, &  '",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "6462cec9-eba9-45cb-99e5-f268268d87e0",
      "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "!",
      "fullTitle": "Alternative Path, with special characters ', !, &  !",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "b787ab15-95b7-4262-a691-601e7005ffd5",
      "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "&",
      "fullTitle": "Alternative Path, with special characters ', !, &  &",
      "timedOut": false,
      "duration": 456,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "4daa89b3-5a4c-4f4e-a117-130f831872d1",
      "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1",
      "timedOut": false,
      "duration": 456,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "e25af5f8-ed55-418b-8639-70c542c61159",
      "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1 =  I",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 1 =  I",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "1a3a00b8-bc75-47dc-8189-320e98f6259b",
      "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "15",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15",
      "timedOut": false,
      "duration": 457,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a8e7812e-0fe5-4289-b27f-f6393f248517",
      "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "15 =  XV",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 15 =  XV",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "dfdfbe4f-ea60-41ac-9716-c696c06a5a1e",
      "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "3999",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', response.statusCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "5009958d-f1d7-473b-a183-493441b1a0bd",
      "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "3999 =  MMMCMXCIX",
      "fullTitle": "Main Path, Inner Boundary Values {1-3999} 3999 =  MMMCMXCIX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "661d580c-085e-481e-902d-6292d6afcda4",
      "parentUUID": "582965a3-6d38-4b7f-8cb3-0699bdc41bc4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "4",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4",
      "timedOut": false,
      "duration": 455,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "b8696d45-4b60-4e3a-9a77-a7c8c21726b1",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "4 =  IV",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 4 =  IV",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "68b377c6-06fa-4af8-9f5f-c94e117f4f3a",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "5",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5",
      "timedOut": false,
      "duration": 457,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "bb92aeb8-875b-42a2-a6a3-17dd8af62440",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "5 =  V",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 5 =  V",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "bf15ecc2-080f-435a-9e1a-c867ead5e4a5",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a62cfd12-489a-427c-937c-f77dfabea8a7",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9 =  IX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 9 =  IX",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "6e27296f-b645-4f6e-8243-480a009b3793",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "10",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10",
      "timedOut": false,
      "duration": 450,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "da4ace96-0ca7-4bd5-9e79-2d879e3c8d58",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "10 =  X",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 10 =  X",
      "timedOut": false,
      "duration": 256,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "9af5739d-ca5c-4c5e-b8ea-333dd1f5050e",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "11",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11",
      "timedOut": false,
      "duration": 455,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "9822f03a-f045-4491-a80e-5f60b23ca113",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "11 =  XI",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 11 =  XI",
      "timedOut": false,
      "duration": 256,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "ca20770a-976d-401e-a15d-fcb691b880b9",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "39",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "9c16ea45-8512-4ed1-91c8-902425ecfce3",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "39 =  XXXIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 39 =  XXXIX",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "e8eeb4d1-c5c9-44cf-ad2d-a8df16a0e528",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "40",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40",
      "timedOut": false,
      "duration": 456,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "7761c9aa-bf47-4683-8dae-d48db85b7888",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "40 =  XL",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 40 =  XL",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "abc86dd4-4fca-441d-b125-f9708c5036fa",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "41",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "2c9e2ea5-630b-4a46-8cde-a38404e221aa",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "41 =  XLI",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 41 =  XLI",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "9e65b1d7-e7e3-4d10-b2fd-c7bd1a8e7c3f",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "89",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89",
      "timedOut": false,
      "duration": 456,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a9225e3d-5a06-4402-b960-57b29d6e70ed",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "89 =  LXXXIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 89 =  LXXXIX",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "07f09b03-0cbb-43d9-a36d-e3a1db413de3",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "90",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "259f85a6-1ab1-49b7-846c-895b292d9ac5",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "90 =  XC",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 90 =  XC",
      "timedOut": false,
      "duration": 252,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "c6149547-750b-4f7f-8f8a-3a388faffa59",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "91",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "cbd3aadc-2ff1-4ff6-840c-71226c59d4e9",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "91 =  XCI",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 91 =  XCI",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "43a5e17d-5519-4c15-b0d1-bdedc6296035",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "389",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "2af5d474-c68f-4421-95d6-5b57afc18ce6",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "389 =  CCCLXXXIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 389 =  CCCLXXXIX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "9ee8258f-d821-478f-b9e4-02d8e9f65598",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "400",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "13cd290d-6797-47e8-8679-3cf303c861c8",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "400 =  CD",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 400 =  CD",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "93357cb8-f346-4b8f-a72f-04bf5a8b6f3c",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "450",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a3d7df90-a9ff-4f13-b8d4-9649521a4b27",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "450 =  CDL",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 450 =  CDL",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "06ddb473-a187-4cbe-a917-abd7758a524f",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "899",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899",
      "timedOut": false,
      "duration": 456,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "da9afba5-e74e-4107-81a2-2292ee8b5d79",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "899 =  DCCCXCIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 899 =  DCCCXCIX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "576bfaa9-e89d-4fc3-8c01-ed6ba88f763f",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "900",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "e09105db-7882-4741-a554-1fd52b05886a",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "900 =  CM",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 900 =  CM",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "77b0c6ce-8251-44ed-b03a-e44bdaf06e95",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "999",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999",
      "timedOut": false,
      "duration": 454,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "39298e48-90ed-4b17-b8b6-09d6b3d2a6ab",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "999 =  CMXCIX",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 999 =  CMXCIX",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "c4f29b0d-f859-40c5-9a37-523e50eaa2dc",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1200",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200",
      "timedOut": false,
      "duration": 453,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(550);\nrequest(endPoint + value, function (error, response, body) {\n    expectedRoman = romanApi.data.intToRoman(value);\n    actualRoman = body;\n    responseCode = response.statusCode;\n    if (debugg) {\n        console.log('error             :', error);\n        console.log('statusCode        :', responseCode);\n    }\n});\nsetTimeout(done, 450);",
      "err": {},
      "isRoot": false,
      "uuid": "a9791310-3261-46ad-bb97-f78f1a4aa723",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "1200 =  MCC",
      "fullTitle": "Main Path, Check combinations {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XL:40, X:10, IX:9, V:5, IV:4, I:1} 1200 =  MCC",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {},
      "isRoot": false,
      "uuid": "ff14b6c1-89fa-4b88-af51-c62b3001c6cc",
      "parentUUID": "137d7e13-c29a-430e-a2d3-2e8b6edc82e6",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "0 =  ",
      "fullTitle": "Alternative Path, Check with 0 0 =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:114:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "4b13bef8-caa7-4a4a-90c8-fc5cdf954f30",
      "parentUUID": "f9b6a582-6f62-4b52-b643-8182d9e3a212",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "9800 =  MMMMMMMMMDCCC",
      "fullTitle": "Alternative Path, Check with 9800 9800 =  MMMMMMMMMDCCC",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: MMMMMMMMMDCCC != ",
        "estack": "AssertionError: MMMMMMMMMDCCC != \n    at Context.<anonymous> (test/AlternativePathTest.js:145:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "3c6f19b1-ead3-4ea1-8638-0f8e472e22a5",
      "parentUUID": "3913bede-a61d-4401-a0c7-0f348685fbad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "-3 =  ",
      "fullTitle": "Alternative Path, Check with -3 -3 =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:177:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "840502f5-9e26-4c3e-b644-9763bb3f7bfc",
      "parentUUID": "ae67e1e3-cebe-4709-b32e-1c979817d530",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Enter a value",
      "fullTitle": "Alternative Path, Check with no values Enter a value",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:207:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "9a0ae376-f6ad-4fe2-b718-ebd45229eb6f",
      "parentUUID": "703bf797-f2f6-438f-bad3-d817b2493427",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "roman =  ",
      "fullTitle": "Alternative Path, with chars  roman =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:239:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "fcb2d882-7a72-4985-9b95-2fc95dc759f0",
      "parentUUID": "010cca88-8700-4eb7-b4c3-0c7793a38cef",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "XII =  ",
      "fullTitle": "Alternative Path, with Roman Numerals   XII =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert((expectedRoman == actualRoman), expectedRoman + \" != \" + actualRoman);\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:302:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "cdef44c3-4539-40f6-98a9-4cbbb0277ed8",
      "parentUUID": "db5d022a-5482-4f14-abcc-9f0900f7316a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "' =  ",
      "fullTitle": "Alternative Path, with special characters ', !, &  ' =  ",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:336:13)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "45e7e8dc-2efc-4811-b292-17eb1b4ad330",
      "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "! =  ",
      "fullTitle": "Alternative Path, with special characters ', !, &  ! =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:336:13)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "f8b6066f-fb76-49be-be4e-89cef51ac1bc",
      "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "& =  ",
      "fullTitle": "Alternative Path, with special characters ', !, &  & =  ",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "if (debugg) {\n    console.log('expectedRoman     :', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual :', expectedRoman == actualRoman);\n    console.log('isRoman           :', romanApi.data.patternMatch(actualRoman));\n    console.log();\n}\nassert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\nsetTimeout(yes, 250);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Context.<anonymous> (test/AlternativePathTest.js:336:13)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "8c965a76-38e3-44f6-a201-fad9c846cba0",
      "parentUUID": "c68a7190-1fc5-41c8-b434-91414e3c8d67",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}