{
  "stats": {
    "suites": 8,
    "tests": 8,
    "passes": 3,
    "pending": 0,
    "failures": 5,
    "start": "2017-07-28T23:37:11.384Z",
    "end": "2017-07-28T23:37:15.016Z",
    "duration": 3632,
    "testsRegistered": 8,
    "passPercent": 37.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Roman Numerals : Main Path, Inner Boundary Values",
        "suites": [],
        "tests": [
          {
            "title": "Values = 1, 15, 3999",
            "fullTitle": "Roman Numerals : Main Path, Inner Boundary Values Values = 1, 15, 3999",
            "timedOut": false,
            "duration": 1214,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var values = [1, 15, 3999];\nthis.timeout(2000);\nvalues.forEach(function (value) {\n    request(endPoint + value, function (error, response, body) {\n        console.log('error             :', error);\n        console.log('statusCode        : ', response.statusCode);\n        var expectedRoman = romanApi.data.intToRoman(value);\n        var actualRoman = body;\n        console.log('expectedRoman     : ', expectedRoman);\n        console.log('actualRoman       :', actualRoman);\n        console.log('expected = actual : ', expectedRoman == actualRoman);\n        console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n        assert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\n        assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n        console.log();\n    });\n});\nsetTimeout(done, 1200);",
            "err": {},
            "isRoot": false,
            "uuid": "ececda87-a6ad-4d54-a88e-c3ee620f695c",
            "parentUUID": "e331a1bf-f44a-45d3-87ef-87063a8f590d",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/RomanNumeralTest.js",
        "uuid": "e331a1bf-f44a-45d3-87ef-87063a8f590d",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/RomanNumeralTest.js",
        "passes": [
          {
            "title": "Values = 1, 15, 3999",
            "fullTitle": "Roman Numerals : Main Path, Inner Boundary Values Values = 1, 15, 3999",
            "timedOut": false,
            "duration": 1214,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var values = [1, 15, 3999];\nthis.timeout(2000);\nvalues.forEach(function (value) {\n    request(endPoint + value, function (error, response, body) {\n        console.log('error             :', error);\n        console.log('statusCode        : ', response.statusCode);\n        var expectedRoman = romanApi.data.intToRoman(value);\n        var actualRoman = body;\n        console.log('expectedRoman     : ', expectedRoman);\n        console.log('actualRoman       :', actualRoman);\n        console.log('expected = actual : ', expectedRoman == actualRoman);\n        console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n        assert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\n        assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n        console.log();\n    });\n});\nsetTimeout(done, 1200);",
            "err": {},
            "isRoot": false,
            "uuid": "ececda87-a6ad-4d54-a88e-c3ee620f695c",
            "parentUUID": "e331a1bf-f44a-45d3-87ef-87063a8f590d",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1214,
        "rootEmpty": false
      },
      {
        "title": "Roman Numerals : Main Path, Check if all the roman numeral combinations are working",
        "suites": [],
        "tests": [
          {
            "title": "Values = 1, 4, 5, 9, 10, 11, 39, 40, 41, 89, 90, 91, 389, 400, 450, 899, 900, 999, 1000",
            "fullTitle": "Roman Numerals : Main Path, Check if all the roman numeral combinations are working Values = 1, 4, 5, 9, 10, 11, 39, 40, 41, 89, 90, 91, 389, 400, 450, 899, 900, 999, 1000",
            "timedOut": false,
            "duration": 1205,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var values = [1, 4, 5, 9, 10, 11, 39, 40, 41, 89, 90, 91, 389, 400, 450, 899, 900, 999, 1000];\nthis.timeout(2000);\nvalues.forEach(function (value) {\n    request(endPoint + value, function (error, response, body) {\n        console.log('error             :', error);\n        console.log('statusCode        : ', response.statusCode);\n        var expectedRoman = romanApi.data.intToRoman(value);\n        var actualRoman = body;\n        console.log('expectedRoman     : ', expectedRoman);\n        console.log('actualRoman       :', actualRoman);\n        console.log('expected = actual : ', expectedRoman == actualRoman);\n        console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n        assert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\n        assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n        console.log();\n    });\n});\nsetTimeout(done, 1200);",
            "err": {},
            "isRoot": false,
            "uuid": "7c3855bb-11e2-44c5-b45b-67f88afa1da9",
            "parentUUID": "fa4903b9-3703-4549-8c8c-2b8c727db8ab",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/RomanNumeralTest.js",
        "uuid": "fa4903b9-3703-4549-8c8c-2b8c727db8ab",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/RomanNumeralTest.js",
        "passes": [
          {
            "title": "Values = 1, 4, 5, 9, 10, 11, 39, 40, 41, 89, 90, 91, 389, 400, 450, 899, 900, 999, 1000",
            "fullTitle": "Roman Numerals : Main Path, Check if all the roman numeral combinations are working Values = 1, 4, 5, 9, 10, 11, 39, 40, 41, 89, 90, 91, 389, 400, 450, 899, 900, 999, 1000",
            "timedOut": false,
            "duration": 1205,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var values = [1, 4, 5, 9, 10, 11, 39, 40, 41, 89, 90, 91, 389, 400, 450, 899, 900, 999, 1000];\nthis.timeout(2000);\nvalues.forEach(function (value) {\n    request(endPoint + value, function (error, response, body) {\n        console.log('error             :', error);\n        console.log('statusCode        : ', response.statusCode);\n        var expectedRoman = romanApi.data.intToRoman(value);\n        var actualRoman = body;\n        console.log('expectedRoman     : ', expectedRoman);\n        console.log('actualRoman       :', actualRoman);\n        console.log('expected = actual : ', expectedRoman == actualRoman);\n        console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n        assert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\n        assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n        console.log();\n    });\n});\nsetTimeout(done, 1200);",
            "err": {},
            "isRoot": false,
            "uuid": "7c3855bb-11e2-44c5-b45b-67f88afa1da9",
            "parentUUID": "fa4903b9-3703-4549-8c8c-2b8c727db8ab",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1205,
        "rootEmpty": false
      },
      {
        "title": "Roman Numerals : Alternative Path, Check with 0",
        "suites": [],
        "tests": [
          {
            "title": "Values = 0",
            "fullTitle": "Roman Numerals : Alternative Path, Check with 0 Values = 0",
            "timedOut": false,
            "duration": 1201,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "this.timeout(2000);\nvar value = 0;\nrequest(endPoint + value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:70:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "7023b68b-1105-488a-9a7d-e9aa5913ed6c",
            "parentUUID": "80ef3641-342a-43a0-893b-465789bba077",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/RomanNumeralTest.js",
        "uuid": "80ef3641-342a-43a0-893b-465789bba077",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/RomanNumeralTest.js",
        "passes": [],
        "failures": [
          {
            "title": "Values = 0",
            "fullTitle": "Roman Numerals : Alternative Path, Check with 0 Values = 0",
            "timedOut": false,
            "duration": 1201,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "this.timeout(2000);\nvar value = 0;\nrequest(endPoint + value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:70:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "7023b68b-1105-488a-9a7d-e9aa5913ed6c",
            "parentUUID": "80ef3641-342a-43a0-893b-465789bba077",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1201,
        "rootEmpty": false
      },
      {
        "title": "Roman Numerals : Alternative Path, Check with 9800",
        "suites": [],
        "tests": [
          {
            "title": "Values = 9800",
            "fullTitle": "Roman Numerals : Alternative Path, Check with 9800 Values = 9800",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "this.timeout(2000);\nvar value = 9800;\nrequest(endPoint + value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:89:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "52bf9ea6-4ce0-4a7c-9007-cd0572f4190a",
            "parentUUID": "da38436d-5f6a-4771-bd74-1ed1d884f5a6",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/RomanNumeralTest.js",
        "uuid": "da38436d-5f6a-4771-bd74-1ed1d884f5a6",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/RomanNumeralTest.js",
        "passes": [],
        "failures": [
          {
            "title": "Values = 9800",
            "fullTitle": "Roman Numerals : Alternative Path, Check with 9800 Values = 9800",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "this.timeout(2000);\nvar value = 9800;\nrequest(endPoint + value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:89:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "52bf9ea6-4ce0-4a7c-9007-cd0572f4190a",
            "parentUUID": "da38436d-5f6a-4771-bd74-1ed1d884f5a6",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Roman Numerals : Alternative Path, Check with -3",
        "suites": [],
        "tests": [
          {
            "title": "Values = -3",
            "fullTitle": "Roman Numerals : Alternative Path, Check with -3 Values = -3",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "this.timeout(2000);\nvar value = -3;\nrequest(endPoint + value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:108:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "e7039e73-38f3-4e93-9840-345d061635e0",
            "parentUUID": "84c3e902-1d25-4cfe-8487-9d5b43c6b146",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/RomanNumeralTest.js",
        "uuid": "84c3e902-1d25-4cfe-8487-9d5b43c6b146",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/RomanNumeralTest.js",
        "passes": [],
        "failures": [
          {
            "title": "Values = -3",
            "fullTitle": "Roman Numerals : Alternative Path, Check with -3 Values = -3",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "this.timeout(2000);\nvar value = -3;\nrequest(endPoint + value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:108:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "e7039e73-38f3-4e93-9840-345d061635e0",
            "parentUUID": "84c3e902-1d25-4cfe-8487-9d5b43c6b146",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Roman Numerals : Alternative Path, Check with no values ",
        "suites": [],
        "tests": [
          {
            "title": "No Values",
            "fullTitle": "Roman Numerals : Alternative Path, Check with no values  No Values",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "this.timeout(2000);\nvar value;\nrequest(endPoint, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:127:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "eae4e1cc-8b00-4da2-b183-e2370849e015",
            "parentUUID": "010f1fd5-3b8d-4aa3-b614-15ded1558838",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/RomanNumeralTest.js",
        "uuid": "010f1fd5-3b8d-4aa3-b614-15ded1558838",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/RomanNumeralTest.js",
        "passes": [],
        "failures": [
          {
            "title": "No Values",
            "fullTitle": "Roman Numerals : Alternative Path, Check with no values  No Values",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "this.timeout(2000);\nvar value;\nrequest(endPoint, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:127:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "eae4e1cc-8b00-4da2-b183-e2370849e015",
            "parentUUID": "010f1fd5-3b8d-4aa3-b614-15ded1558838",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Roman Numerals : Alternative Path, with chars ",
        "suites": [],
        "tests": [
          {
            "title": "Values = roman",
            "fullTitle": "Roman Numerals : Alternative Path, with chars  Values = roman",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "this.timeout(2000);\nvar value = \"roman\";\nrequest(endPoint+value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:146:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "1d3ad6bf-8e99-47cb-acb0-23bb780a3b60",
            "parentUUID": "be62541b-02e1-4791-b901-fae147d5f7b9",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/RomanNumeralTest.js",
        "uuid": "be62541b-02e1-4791-b901-fae147d5f7b9",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/RomanNumeralTest.js",
        "passes": [],
        "failures": [
          {
            "title": "Values = roman",
            "fullTitle": "Roman Numerals : Alternative Path, with chars  Values = roman",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "this.timeout(2000);\nvar value = \"roman\";\nrequest(endPoint+value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
            "err": {
              "message": "AssertionError: returned isn't a roman",
              "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:146:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
              "diff": "- false\n+ true\n"
            },
            "isRoot": false,
            "uuid": "1d3ad6bf-8e99-47cb-acb0-23bb780a3b60",
            "parentUUID": "be62541b-02e1-4791-b901-fae147d5f7b9",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Roman Numerals : Alternative Path, with decimal values ",
        "suites": [],
        "tests": [
          {
            "title": "Values = 45.34",
            "fullTitle": "Roman Numerals : Alternative Path, with decimal values  Values = 45.34",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(2000);\nvar value = 45.34;\nrequest(endPoint+value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
            "err": {},
            "isRoot": false,
            "uuid": "8323f72b-de8d-4f7b-8a77-7e18359f0dd7",
            "parentUUID": "c1093936-aa20-49d5-af7e-50e96f6d2ea6",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/RomanNumeralTest.js",
        "uuid": "c1093936-aa20-49d5-af7e-50e96f6d2ea6",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/jmo51/Desktop/bbApi/romansJS/test/RomanNumeralTest.js",
        "passes": [
          {
            "title": "Values = 45.34",
            "fullTitle": "Roman Numerals : Alternative Path, with decimal values  Values = 45.34",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(2000);\nvar value = 45.34;\nrequest(endPoint+value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
            "err": {},
            "isRoot": false,
            "uuid": "8323f72b-de8d-4f7b-8a77-7e18359f0dd7",
            "parentUUID": "c1093936-aa20-49d5-af7e-50e96f6d2ea6",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "f5704a31-9993-466a-b1b0-5329200d4a37",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "Values = 1, 15, 3999",
      "fullTitle": "Roman Numerals : Main Path, Inner Boundary Values Values = 1, 15, 3999",
      "timedOut": false,
      "duration": 1214,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var values = [1, 15, 3999];\nthis.timeout(2000);\nvalues.forEach(function (value) {\n    request(endPoint + value, function (error, response, body) {\n        console.log('error             :', error);\n        console.log('statusCode        : ', response.statusCode);\n        var expectedRoman = romanApi.data.intToRoman(value);\n        var actualRoman = body;\n        console.log('expectedRoman     : ', expectedRoman);\n        console.log('actualRoman       :', actualRoman);\n        console.log('expected = actual : ', expectedRoman == actualRoman);\n        console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n        assert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\n        assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n        console.log();\n    });\n});\nsetTimeout(done, 1200);",
      "err": {},
      "isRoot": false,
      "uuid": "ececda87-a6ad-4d54-a88e-c3ee620f695c",
      "parentUUID": "e331a1bf-f44a-45d3-87ef-87063a8f590d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Values = 1, 4, 5, 9, 10, 11, 39, 40, 41, 89, 90, 91, 389, 400, 450, 899, 900, 999, 1000",
      "fullTitle": "Roman Numerals : Main Path, Check if all the roman numeral combinations are working Values = 1, 4, 5, 9, 10, 11, 39, 40, 41, 89, 90, 91, 389, 400, 450, 899, 900, 999, 1000",
      "timedOut": false,
      "duration": 1205,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var values = [1, 4, 5, 9, 10, 11, 39, 40, 41, 89, 90, 91, 389, 400, 450, 899, 900, 999, 1000];\nthis.timeout(2000);\nvalues.forEach(function (value) {\n    request(endPoint + value, function (error, response, body) {\n        console.log('error             :', error);\n        console.log('statusCode        : ', response.statusCode);\n        var expectedRoman = romanApi.data.intToRoman(value);\n        var actualRoman = body;\n        console.log('expectedRoman     : ', expectedRoman);\n        console.log('actualRoman       :', actualRoman);\n        console.log('expected = actual : ', expectedRoman == actualRoman);\n        console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n        assert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\n        assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n        console.log();\n    });\n});\nsetTimeout(done, 1200);",
      "err": {},
      "isRoot": false,
      "uuid": "7c3855bb-11e2-44c5-b45b-67f88afa1da9",
      "parentUUID": "fa4903b9-3703-4549-8c8c-2b8c727db8ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Values = 0",
      "fullTitle": "Roman Numerals : Alternative Path, Check with 0 Values = 0",
      "timedOut": false,
      "duration": 1201,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(2000);\nvar value = 0;\nrequest(endPoint + value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:70:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "7023b68b-1105-488a-9a7d-e9aa5913ed6c",
      "parentUUID": "80ef3641-342a-43a0-893b-465789bba077",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Values = 9800",
      "fullTitle": "Roman Numerals : Alternative Path, Check with 9800 Values = 9800",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(2000);\nvar value = 9800;\nrequest(endPoint + value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:89:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "52bf9ea6-4ce0-4a7c-9007-cd0572f4190a",
      "parentUUID": "da38436d-5f6a-4771-bd74-1ed1d884f5a6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Values = -3",
      "fullTitle": "Roman Numerals : Alternative Path, Check with -3 Values = -3",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(2000);\nvar value = -3;\nrequest(endPoint + value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:108:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "e7039e73-38f3-4e93-9840-345d061635e0",
      "parentUUID": "84c3e902-1d25-4cfe-8487-9d5b43c6b146",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "No Values",
      "fullTitle": "Roman Numerals : Alternative Path, Check with no values  No Values",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(2000);\nvar value;\nrequest(endPoint, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:127:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "eae4e1cc-8b00-4da2-b183-e2370849e015",
      "parentUUID": "010f1fd5-3b8d-4aa3-b614-15ded1558838",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Values = roman",
      "fullTitle": "Roman Numerals : Alternative Path, with chars  Values = roman",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(2000);\nvar value = \"roman\";\nrequest(endPoint+value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:146:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "1d3ad6bf-8e99-47cb-acb0-23bb780a3b60",
      "parentUUID": "be62541b-02e1-4791-b901-fae147d5f7b9",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Values = 45.34",
      "fullTitle": "Roman Numerals : Alternative Path, with decimal values  Values = 45.34",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(2000);\nvar value = 45.34;\nrequest(endPoint+value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
      "err": {},
      "isRoot": false,
      "uuid": "8323f72b-de8d-4f7b-8a77-7e18359f0dd7",
      "parentUUID": "c1093936-aa20-49d5-af7e-50e96f6d2ea6",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Values = 1, 15, 3999",
      "fullTitle": "Roman Numerals : Main Path, Inner Boundary Values Values = 1, 15, 3999",
      "timedOut": false,
      "duration": 1214,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var values = [1, 15, 3999];\nthis.timeout(2000);\nvalues.forEach(function (value) {\n    request(endPoint + value, function (error, response, body) {\n        console.log('error             :', error);\n        console.log('statusCode        : ', response.statusCode);\n        var expectedRoman = romanApi.data.intToRoman(value);\n        var actualRoman = body;\n        console.log('expectedRoman     : ', expectedRoman);\n        console.log('actualRoman       :', actualRoman);\n        console.log('expected = actual : ', expectedRoman == actualRoman);\n        console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n        assert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\n        assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n        console.log();\n    });\n});\nsetTimeout(done, 1200);",
      "err": {},
      "isRoot": false,
      "uuid": "ececda87-a6ad-4d54-a88e-c3ee620f695c",
      "parentUUID": "e331a1bf-f44a-45d3-87ef-87063a8f590d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Values = 1, 4, 5, 9, 10, 11, 39, 40, 41, 89, 90, 91, 389, 400, 450, 899, 900, 999, 1000",
      "fullTitle": "Roman Numerals : Main Path, Check if all the roman numeral combinations are working Values = 1, 4, 5, 9, 10, 11, 39, 40, 41, 89, 90, 91, 389, 400, 450, 899, 900, 999, 1000",
      "timedOut": false,
      "duration": 1205,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var values = [1, 4, 5, 9, 10, 11, 39, 40, 41, 89, 90, 91, 389, 400, 450, 899, 900, 999, 1000];\nthis.timeout(2000);\nvalues.forEach(function (value) {\n    request(endPoint + value, function (error, response, body) {\n        console.log('error             :', error);\n        console.log('statusCode        : ', response.statusCode);\n        var expectedRoman = romanApi.data.intToRoman(value);\n        var actualRoman = body;\n        console.log('expectedRoman     : ', expectedRoman);\n        console.log('actualRoman       :', actualRoman);\n        console.log('expected = actual : ', expectedRoman == actualRoman);\n        console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n        assert(actualRoman, expectedRoman, expectedRoman + \" != \" + actualRoman);\n        assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n        console.log();\n    });\n});\nsetTimeout(done, 1200);",
      "err": {},
      "isRoot": false,
      "uuid": "7c3855bb-11e2-44c5-b45b-67f88afa1da9",
      "parentUUID": "fa4903b9-3703-4549-8c8c-2b8c727db8ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Values = 45.34",
      "fullTitle": "Roman Numerals : Alternative Path, with decimal values  Values = 45.34",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "this.timeout(2000);\nvar value = 45.34;\nrequest(endPoint+value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
      "err": {},
      "isRoot": false,
      "uuid": "8323f72b-de8d-4f7b-8a77-7e18359f0dd7",
      "parentUUID": "c1093936-aa20-49d5-af7e-50e96f6d2ea6",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "Values = 0",
      "fullTitle": "Roman Numerals : Alternative Path, Check with 0 Values = 0",
      "timedOut": false,
      "duration": 1201,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(2000);\nvar value = 0;\nrequest(endPoint + value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:70:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "7023b68b-1105-488a-9a7d-e9aa5913ed6c",
      "parentUUID": "80ef3641-342a-43a0-893b-465789bba077",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Values = 9800",
      "fullTitle": "Roman Numerals : Alternative Path, Check with 9800 Values = 9800",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(2000);\nvar value = 9800;\nrequest(endPoint + value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:89:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "52bf9ea6-4ce0-4a7c-9007-cd0572f4190a",
      "parentUUID": "da38436d-5f6a-4771-bd74-1ed1d884f5a6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Values = -3",
      "fullTitle": "Roman Numerals : Alternative Path, Check with -3 Values = -3",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(2000);\nvar value = -3;\nrequest(endPoint + value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:108:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "e7039e73-38f3-4e93-9840-345d061635e0",
      "parentUUID": "84c3e902-1d25-4cfe-8487-9d5b43c6b146",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "No Values",
      "fullTitle": "Roman Numerals : Alternative Path, Check with no values  No Values",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(2000);\nvar value;\nrequest(endPoint, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:127:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "eae4e1cc-8b00-4da2-b183-e2370849e015",
      "parentUUID": "010f1fd5-3b8d-4aa3-b614-15ded1558838",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Values = roman",
      "fullTitle": "Roman Numerals : Alternative Path, with chars  Values = roman",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "this.timeout(2000);\nvar value = \"roman\";\nrequest(endPoint+value, function (error, response, body) {\n    console.log('error             :', error);\n    console.log('statusCode        : ', response.statusCode);\n    var expectedRoman = romanApi.data.intToRoman(value);\n    var actualRoman = body;\n    console.log('expectedRoman     : ', expectedRoman);\n    console.log('actualRoman       :', actualRoman);\n    console.log('expected = actual : ', expectedRoman == actualRoman);\n    console.log('isRoman           : ', romanApi.data.patternMatch(actualRoman));\n    assert(romanApi.data.patternMatch(actualRoman), \"returned isn't a roman\");\n});\nsetTimeout(done, 1200);",
      "err": {
        "message": "AssertionError: returned isn't a roman",
        "estack": "AssertionError: returned isn't a roman\n    at Request._callback (test/RomanNumeralTest.js:146:13)\n    at Request.self.callback (/Users/jmo51/node_modules/request/request.js:186:22)\n    at Request.<anonymous> (/Users/jmo51/node_modules/request/request.js:1081:10)\n    at IncomingMessage.<anonymous> (/Users/jmo51/node_modules/request/request.js:1001:12)\n    at endReadableNT (_stream_readable.js:975:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "1d3ad6bf-8e99-47cb-acb0-23bb780a3b60",
      "parentUUID": "be62541b-02e1-4791-b901-fae147d5f7b9",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}